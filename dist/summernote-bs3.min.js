"use strict";

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n6 = 0, F = function F() {}; return { s: F, n: function n() { return _n6 >= r.length ? { done: !0 } : { done: !1, value: r[_n6++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/*! Summernote v0.9.1 | (c) 2013- Hackerwins and contributors | MIT license */
(function () {
  "use strict";

  $.summernote = $.summernote || {
    lang: {}
  }, $.extend(!0, $.summernote.lang, {
    "en-US": {
      font: {
        bold: "Bold",
        italic: "Italic",
        underline: "Underline",
        clear: "Remove Font Style",
        height: "Line Height",
        name: "Font Family",
        strikethrough: "Strikethrough",
        subscript: "Subscript",
        superscript: "Superscript",
        size: "Font Size",
        sizeunit: "Font Size Unit"
      },
      image: {
        image: "Picture",
        insert: "Insert Image",
        resizeFull: "Resize full",
        resizeHalf: "Resize half",
        resizeQuarter: "Resize quarter",
        resizeNone: "Original size",
        floatLeft: "Float Left",
        floatRight: "Float Right",
        floatNone: "Remove float",
        shapeRounded: "Shape: Rounded",
        shapeCircle: "Shape: Circle",
        shapeThumbnail: "Shape: Thumbnail",
        shapeNone: "Shape: None",
        dragImageHere: "Drag image or text here",
        dropImage: "Drop image or Text",
        selectFromFiles: "Select from files",
        maximumFileSize: "Maximum file size",
        maximumFileSizeError: "Maximum file size exceeded.",
        url: "Image URL",
        remove: "Remove Image",
        original: "Original"
      },
      video: {
        video: "Video",
        videoLink: "Video Link",
        insert: "Insert Video",
        url: "Video URL",
        providers: "(YouTube, Google Drive, Vimeo, Vine, Instagram, DailyMotion, Youku, Peertube)"
      },
      link: {
        link: "Link",
        insert: "Insert Link",
        unlink: "Unlink",
        edit: "Edit",
        textToDisplay: "Text to display",
        url: "To what URL should this link go?",
        openInNewWindow: "Open in new window"
      },
      table: {
        table: "Table",
        addRowAbove: "Add row above",
        addRowBelow: "Add row below",
        addColLeft: "Add column left",
        addColRight: "Add column right",
        delRow: "Delete row",
        delCol: "Delete column",
        delTable: "Delete table"
      },
      hr: {
        insert: "Insert Horizontal Rule"
      },
      style: {
        style: "Style",
        p: "Normal",
        blockquote: "Quote",
        pre: "Code",
        h1: "Header 1",
        h2: "Header 2",
        h3: "Header 3",
        h4: "Header 4",
        h5: "Header 5",
        h6: "Header 6"
      },
      lists: {
        unordered: "Unordered list",
        ordered: "Ordered list"
      },
      options: {
        help: "Help",
        fullscreen: "Full Screen",
        codeview: "Code View"
      },
      paragraph: {
        paragraph: "Paragraph",
        outdent: "Outdent",
        indent: "Indent",
        left: "Align left",
        center: "Align center",
        right: "Align right",
        justify: "Justify full"
      },
      color: {
        recent: "Recent Color",
        more: "More Color",
        background: "Background Color",
        foreground: "Text Color",
        transparent: "Transparent",
        setTransparent: "Set transparent",
        reset: "Reset",
        resetToDefault: "Reset to default",
        cpSelect: "Select"
      },
      shortcut: {
        shortcuts: "Keyboard shortcuts",
        close: "Close",
        textFormatting: "Text formatting",
        action: "Action",
        paragraphFormatting: "Paragraph formatting",
        documentStyle: "Document Style",
        extraKeys: "Extra keys"
      },
      help: {
        escape: "Escape",
        insertParagraph: "Insert Paragraph",
        undo: "Undo the last command",
        redo: "Redo the last command",
        tab: "Tab",
        untab: "Untab",
        bold: "Set a bold style",
        italic: "Set a italic style",
        underline: "Set a underline style",
        strikethrough: "Set a strikethrough style",
        removeFormat: "Clean a style",
        justifyLeft: "Set left align",
        justifyCenter: "Set center align",
        justifyRight: "Set right align",
        justifyFull: "Set full align",
        insertUnorderedList: "Toggle unordered list",
        insertOrderedList: "Toggle ordered list",
        outdent: "Outdent on current paragraph",
        indent: "Indent on current paragraph",
        formatPara: "Change current block's format as a paragraph(P tag)",
        formatH1: "Change current block's format as H1",
        formatH2: "Change current block's format as H2",
        formatH3: "Change current block's format as H3",
        formatH4: "Change current block's format as H4",
        formatH5: "Change current block's format as H5",
        formatH6: "Change current block's format as H6",
        insertHorizontalRule: "Insert horizontal rule",
        "linkDialog.show": "Show Link Dialog"
      },
      history: {
        undo: "Undo",
        redo: "Redo"
      },
      specialChar: {
        specialChar: "SPECIAL CHARACTERS",
        select: "Select Special characters"
      },
      output: {
        noSelection: "No Selection Made!"
      }
    }
  });
  var Nt = ["sans-serif", "serif", "monospace", "cursive", "fantasy"];
  function It(i) {
    return $.inArray(i.toLowerCase(), Nt) === -1 ? "'".concat(i, "'") : i;
  }
  function ce() {
    var i = "mw",
      t = "20px";
    var n = document.createElement("canvas"),
      s = n.getContext("2d", {
        willReadFrequently: !0
      });
    n.width = 40, n.height = 20, s.textAlign = "center", s.fillStyle = "black", s.textBaseline = "middle";
    function a(l, c) {
      s.clearRect(0, 0, 40, 20), s.font = t + " " + It(l) + ', "' + c + '"', s.fillText(i, 40 / 2, 20 / 2);
      var h = s.getImageData(0, 0, 40, 20).data;
      return h.join("");
    }
    return function (l) {
      var c = l === "Comic Sans MS" ? "Courier New" : "Comic Sans MS";
      var h = a(c, c),
        d = a(l, c);
      return h !== d;
    };
  }
  var B = navigator.userAgent,
    at = /MSIE|Trident/i.test(B);
  var lt;
  if (at) {
    var i = /MSIE (\d+[.]\d+)/.exec(B);
    i && (lt = parseFloat(i[1])), i = /Trident\/.*rv:([0-9]{1,}[.0-9]{0,})/.exec(B), i && (lt = parseFloat(i[1]));
  }
  var G = /Edge\/\d+/.test(B),
    he = "ontouchstart" in window || navigator.MaxTouchPoints > 0 || navigator.msMaxTouchPoints > 0,
    de = at ? "DOMCharacterDataModified DOMSubtreeModified DOMNodeInserted" : "input",
    S = {
      isMac: navigator.appVersion.indexOf("Mac") > -1,
      isMSIE: at,
      isEdge: G,
      isFF: !G && /firefox/i.test(B),
      isPhantom: /PhantomJS/i.test(B),
      isWebkit: !G && /webkit/i.test(B),
      isChrome: !G && /chrome/i.test(B),
      isSafari: !G && /safari/i.test(B) && !/chrome/i.test(B),
      browserVersion: lt,
      isSupportTouch: he,
      isFontInstalled: ce(),
      isW3CRangeSupport: !!document.createRange,
      inputEventName: de,
      genericFontFamilies: Nt,
      validFontName: It
    };
  function ue(i) {
    return function (t) {
      return i === t;
    };
  }
  function fe(i, t) {
    return i === t;
  }
  function pe(i) {
    return function (t, e) {
      return t[i] === e[i];
    };
  }
  function me() {
    return !0;
  }
  function ge() {
    return !1;
  }
  function be(i) {
    return function () {
      return !i.apply(i, arguments);
    };
  }
  function ve(i, t) {
    return function (e) {
      return i(e) && t(e);
    };
  }
  function Ce(i) {
    return i;
  }
  function ke(i, t) {
    return function () {
      return i[t].apply(i, arguments);
    };
  }
  var At = 0;
  function we() {
    At = 0;
  }
  function xe(i) {
    var t = ++At + "";
    return i ? i + t : t;
  }
  function $e(i) {
    var t = $(document);
    return {
      top: i.top + t.scrollTop(),
      left: i.left + t.scrollLeft(),
      width: i.right - i.left,
      height: i.bottom - i.top
    };
  }
  function ye(i) {
    var t = {};
    for (var e in i) Object.prototype.hasOwnProperty.call(i, e) && (t[i[e]] = e);
    return t;
  }
  function Se(i, t) {
    return t = t || "", t + i.split(".").map(function (e) {
      return e.substring(0, 1).toUpperCase() + e.substring(1);
    }).join("");
  }
  function Te(i, t, e) {
    var o;
    return function () {
      var n = this,
        s = arguments,
        a = function a() {
          o = null, e || i.apply(n, s);
        },
        l = e && !o;
      clearTimeout(o), o = setTimeout(a, t), l && i.apply(n, s);
    };
  }
  function Ee(i) {
    return /[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/gi.test(i);
  }
  var v = {
    eq: ue,
    eq2: fe,
    peq2: pe,
    ok: me,
    fail: ge,
    self: Ce,
    not: be,
    and: ve,
    invoke: ke,
    resetUniqueId: we,
    uniqueId: xe,
    rect2bnd: $e,
    invertObject: ye,
    namespaceToCamel: Se,
    debounce: Te,
    isValidUrl: Ee
  };
  function Pt(i) {
    return i[0];
  }
  function ct(i) {
    return i[i.length - 1];
  }
  function Re(i) {
    return i.slice(0, i.length - 1);
  }
  function Lt(i) {
    return i.slice(1);
  }
  function Ne(i, t) {
    for (var e = 0, o = i.length; e < o; e++) {
      var n = i[e];
      if (t(n)) return n;
    }
  }
  function Ie(i, t) {
    for (var e = 0, o = i.length; e < o; e++) if (!t(i[e])) return !1;
    return !0;
  }
  function Ft(i, t) {
    if (i && i.length && t) {
      if (i.indexOf) return i.indexOf(t) !== -1;
      if (i.contains) return i.contains(t);
    }
    return !1;
  }
  function Ae(i, t) {
    return t = t || v.self, i.reduce(function (e, o) {
      return e + t(o);
    }, 0);
  }
  function Pe(i) {
    var t = [],
      e = i.length;
    var o = -1;
    for (; ++o < e;) t[o] = i[o];
    return t;
  }
  function Le(i) {
    return !i || !i.length;
  }
  function Fe(i, t) {
    return i.length ? Lt(i).reduce(function (o, n) {
      var s = ct(o);
      return t(ct(s), n) ? s[s.length] = n : o[o.length] = [n], o;
    }, [[Pt(i)]]) : [];
  }
  function He(i) {
    var t = [];
    for (var e = 0, o = i.length; e < o; e++) i[e] && t.push(i[e]);
    return t;
  }
  function De(i) {
    var t = [];
    for (var e = 0, o = i.length; e < o; e++) Ft(t, i[e]) || t.push(i[e]);
    return t;
  }
  function Me(i, t) {
    if (i && i.length && t) {
      var e = i.indexOf(t);
      return e === -1 ? null : i[e + 1];
    }
    return null;
  }
  function ze(i, t) {
    if (i && i.length && t) {
      var e = i.indexOf(t);
      return e === -1 ? null : i[e - 1];
    }
    return null;
  }
  var u = {
      head: Pt,
      last: ct,
      initial: Re,
      tail: Lt,
      prev: ze,
      next: Me,
      find: Ne,
      contains: Ft,
      all: Ie,
      sum: Ae,
      from: Pe,
      isEmpty: Le,
      clusterBy: Fe,
      compact: He,
      unique: De
    },
    ht = " ",
    Be = "\uFEFF";
  function H(i) {
    return i && $(i).hasClass("note-editable");
  }
  function Oe(i) {
    return i && $(i).hasClass("note-control-sizing");
  }
  function E(i) {
    return i = i.toUpperCase(), function (t) {
      return t && t.nodeName.toUpperCase() === i;
    };
  }
  function D(i) {
    return i && i.nodeType === 3;
  }
  function Ue(i) {
    return i && i.nodeType === 1;
  }
  function tt(i) {
    return i && /^BR|^IMG|^HR|^IFRAME|^BUTTON|^INPUT|^AUDIO|^VIDEO|^EMBED/.test(i.nodeName.toUpperCase());
  }
  function q(i) {
    return H(i) ? !1 : i && /^DIV|^P|^LI|^H[1-7]/.test(i.nodeName.toUpperCase());
  }
  function je(i) {
    return i && /^H[1-7]/.test(i.nodeName.toUpperCase());
  }
  var We = E("PRE"),
    dt = E("LI");
  function Ke(i) {
    return q(i) && !dt(i);
  }
  var ut = E("TABLE"),
    Ht = E("DATA");
  function et(i) {
    return !mt(i) && !ft(i) && !Ve(i) && !q(i) && !ut(i) && !pt(i) && !Ht(i);
  }
  function ft(i) {
    return i && /^UL|^OL/.test(i.nodeName.toUpperCase());
  }
  var Ve = E("HR");
  function Dt(i) {
    return i && /^TD|^TH/.test(i.nodeName.toUpperCase());
  }
  var pt = E("BLOCKQUOTE");
  function mt(i) {
    return Dt(i) || pt(i) || H(i);
  }
  var Mt = E("A");
  function qe(i) {
    return et(i) && !!it(i, q);
  }
  function _e(i) {
    return et(i) && !it(i, q);
  }
  var Ge = E("BODY");
  function Ze(i, t) {
    return i.nextSibling === t || i.previousSibling === t;
  }
  function Ye(i, t) {
    t = t || v.ok;
    var e = [];
    return i.previousSibling && t(i.previousSibling) && e.push(i.previousSibling), e.push(i), i.nextSibling && t(i.nextSibling) && e.push(i.nextSibling), e;
  }
  var ot = S.isMSIE && S.browserVersion < 11 ? "&nbsp;" : "<br>";
  function F(i) {
    return D(i) ? i.nodeValue.length : i ? i.childNodes.length : 0;
  }
  function Xe(i) {
    do if (i.firstElementChild === null || i.firstElementChild.innerHTML === "") break; while (i = i.firstElementChild);
    return _(i);
  }
  function _(i) {
    var t = F(i);
    return t === 0 || !D(i) && t === 1 && i.innerHTML === ot ? !0 : !!(u.all(i.childNodes, D) && i.innerHTML === "");
  }
  function zt(i) {
    !tt(i) && !F(i) && (i.innerHTML = ot);
  }
  function it(i, t) {
    for (; i;) {
      if (t(i)) return i;
      if (H(i)) break;
      i = i.parentNode;
    }
    return null;
  }
  function Qe(i, t) {
    for (i = i.parentNode; i && F(i) === 1;) {
      if (t(i)) return i;
      if (H(i)) break;
      i = i.parentNode;
    }
    return null;
  }
  function W(i, t) {
    t = t || v.fail;
    var e = [];
    return it(i, function (o) {
      return H(o) || e.push(o), t(o);
    }), e;
  }
  function Je(i, t) {
    var e = W(i);
    return u.last(e.filter(t));
  }
  function to(i, t) {
    var e = W(i);
    for (var o = t; o; o = o.parentNode) if (e.indexOf(o) > -1) return o;
    return null;
  }
  function eo(i, t) {
    t = t || v.fail;
    var e = [];
    for (; i && !t(i);) e.push(i), i = i.previousSibling;
    return e;
  }
  function Bt(i, t) {
    t = t || v.fail;
    var e = [];
    for (; i && !t(i);) e.push(i), i = i.nextSibling;
    return e;
  }
  function oo(i, t) {
    var e = [];
    return t = t || v.ok, function o(n) {
      i !== n && t(n) && e.push(n);
      for (var s = 0, a = n.childNodes.length; s < a; s++) o(n.childNodes[s]);
    }(i), e;
  }
  function io(i, t) {
    var e = i.parentNode,
      o = $("<" + t + ">")[0];
    return e.insertBefore(o, i), o.appendChild(i), o;
  }
  function gt(i, t) {
    var e = t.nextSibling;
    var o = t.parentNode;
    return e ? o.insertBefore(i, e) : o.appendChild(i), i;
  }
  function bt(i, t, e) {
    return $.each(t, function (o, n) {
      !e && dt(i) && i.firstChild === null && ft(n) && i.appendChild(Ct("br")), i.appendChild(n);
    }), i;
  }
  function nt(i) {
    return i.offset === 0;
  }
  function Z(i) {
    return i.offset === F(i.node);
  }
  function Ot(i) {
    return nt(i) || Z(i);
  }
  function Ut(i, t) {
    for (; i && i !== t;) {
      if (K(i) !== 0) return !1;
      i = i.parentNode;
    }
    return !0;
  }
  function jt(i, t) {
    if (!t) return !1;
    for (; i && i !== t;) {
      if (K(i) !== F(i.parentNode) - 1) return !1;
      i = i.parentNode;
    }
    return !0;
  }
  function no(i, t) {
    return nt(i) && Ut(i.node, t);
  }
  function so(i, t) {
    return Z(i) && jt(i.node, t);
  }
  function K(i) {
    var t = 0;
    for (; i = i.previousSibling;) t += 1;
    return t;
  }
  function Y(i) {
    return !!(i && i.childNodes && i.childNodes.length);
  }
  function Wt(i, t) {
    var e, o;
    if (i.offset === 0) {
      if (H(i.node)) return null;
      e = i.node.parentNode, o = K(i.node);
    } else Y(i.node) ? (e = i.node.childNodes[i.offset - 1], o = F(e)) : (e = i.node, o = t ? 0 : i.offset - 1);
    return {
      node: e,
      offset: o
    };
  }
  function Kt(i, t) {
    var e, o;
    if (F(i.node) === i.offset) {
      if (H(i.node)) return null;
      var n = qt(i.node);
      n ? (e = n, o = 0) : (e = i.node.parentNode, o = K(i.node) + 1);
    } else Y(i.node) ? (e = i.node.childNodes[i.offset], o = 0) : (e = i.node, o = t ? F(i.node) : i.offset + 1);
    return {
      node: e,
      offset: o
    };
  }
  function Vt(i, t) {
    var e,
      o = 0;
    if (F(i.node) === i.offset) {
      if (H(i.node)) return null;
      e = i.node.parentNode, o = K(i.node) + 1, H(e) && (e = i.node.nextSibling, o = 0);
    } else Y(i.node) ? (e = i.node.childNodes[i.offset], o = 0) : (e = i.node, o = t ? F(i.node) : i.offset + 1);
    return {
      node: e,
      offset: o
    };
  }
  function qt(i) {
    if (i.nextSibling && i.parent === i.nextSibling.parent) return D(i.nextSibling) ? i.nextSibling : qt(i.nextSibling);
  }
  function _t(i, t) {
    return i.node === t.node && i.offset === t.offset;
  }
  function ro(i) {
    if (D(i.node) || !Y(i.node) || _(i.node)) return !0;
    var t = i.node.childNodes[i.offset - 1],
      e = i.node.childNodes[i.offset];
    return !!((!t || tt(t)) && (!e || tt(e)) || ut(e));
  }
  function ao(i, t) {
    for (; i;) {
      if (t(i)) return i;
      i = Wt(i);
    }
    return null;
  }
  function lo(i, t) {
    for (; i;) {
      if (t(i)) return i;
      i = Kt(i);
    }
    return null;
  }
  function co(i) {
    if (!D(i.node)) return !1;
    var t = i.node.nodeValue.charAt(i.offset - 1);
    return t && t !== " " && t !== ht;
  }
  function ho(i) {
    if (!D(i.node)) return !1;
    var t = i.node.nodeValue.charAt(i.offset - 1);
    return t === " " || t === ht;
  }
  function uo(i, t, e, o) {
    var n = i;
    for (; n && n.node && (e(n), !_t(n, t));) {
      var s = o && i.node !== n.node && t.node !== n.node;
      n = Vt(n, s);
    }
  }
  function fo(i, t) {
    return W(t, v.eq(i)).map(K).reverse();
  }
  function po(i, t) {
    var e = i;
    for (var o = 0, n = t.length; o < n; o++) e.childNodes.length <= t[o] ? e = e.childNodes[e.childNodes.length - 1] : e = e.childNodes[t[o]];
    return e;
  }
  function vt(i, t) {
    var e = t && t.isSkipPaddingBlankHTML;
    var o = t && t.isNotSplitEdgePoint,
      n = t && t.isDiscardEmptySplits;
    if (n && (e = !0), Ot(i) && (D(i.node) || o)) {
      if (nt(i)) return i.node;
      if (Z(i)) return i.node.nextSibling;
    }
    if (D(i.node)) return i.node.splitText(i.offset);
    {
      var s = i.node.childNodes[i.offset];
      var a = Bt(s);
      var l = gt(i.node.cloneNode(!1), i.node);
      return bt(l, a), e || (zt(i.node), zt(l)), n && (_(i.node) && X(i.node), _(l)) ? (X(l), i.node.nextSibling) : l;
    }
  }
  function Gt(i, t, e) {
    var o = W(t.node, v.eq(i));
    if (o.length) {
      if (o.length === 1) return vt(t, e);
    } else return null;
    if (o.length > 2) {
      var s = o.slice(0, o.length - 1).find(function (a) {
        return a.nextSibling;
      });
      if (s && t.offset != 0 && Z(t)) {
        var a = s.nextSibling,
          l;
        a.nodeType == 1 ? (l = a.childNodes[0], o = W(l, v.eq(i)), t = {
          node: l,
          offset: 0
        }) : a.nodeType == 3 && !a.data.match(/[\n\r]/g) && (l = a, o = W(l, v.eq(i)), t = {
          node: l,
          offset: 0
        });
      }
    }
    return o.reduce(function (n, s) {
      return n === t.node && (n = vt(t, e)), vt({
        node: s,
        offset: n ? K(n) : F(s)
      }, e);
    });
  }
  function mo(i, t) {
    var e = t ? q : mt,
      o = W(i.node, e),
      n = u.last(o) || i.node;
    var s, a;
    e(n) ? (s = o[o.length - 2], a = n) : (s = n, a = s.parentNode);
    var l = s && Gt(s, i, {
      isSkipPaddingBlankHTML: t,
      isNotSplitEdgePoint: t
    });
    return !l && a === i.node && (l = i.node.childNodes[i.offset]), {
      rightNode: l,
      container: a
    };
  }
  function Ct(i) {
    return document.createElement(i);
  }
  function go(i) {
    return document.createTextNode(i);
  }
  function X(i, t) {
    if (!i || !i.parentNode) return;
    if (i.removeNode) return i.removeNode(t);
    var e = i.parentNode;
    if (!t) {
      var o = [];
      for (var n = 0, s = i.childNodes.length; n < s; n++) o.push(i.childNodes[n]);
      for (var _n = 0, _s = o.length; _n < _s; _n++) e.insertBefore(o[_n], i);
    }
    e.removeChild(i);
  }
  function bo(i, t) {
    for (; i && !(H(i) || !t(i));) {
      var e = i.parentNode;
      X(i), i = e;
    }
  }
  function vo(i, t) {
    if (i.nodeName.toUpperCase() === t.toUpperCase()) return i;
    var e = Ct(t);
    return i.style.cssText && (e.style.cssText = i.style.cssText), bt(e, u.from(i.childNodes)), gt(e, i), X(i), e;
  }
  var Zt = E("TEXTAREA");
  function Yt(i, t) {
    var e = Zt(i[0]) ? i.val() : i.html();
    return t ? e.replace(/[\n\r]/g, "") : e;
  }
  function Co(i, t) {
    var e = Yt(i);
    if (t) {
      var o = /<(\/?)(\b(?!!)[^>\s]*)(.*?)(\s*\/?>)/g;
      e = e.replace(o, function (n, s, a) {
        a = a.toUpperCase();
        var l = /^DIV|^TD|^TH|^P|^LI|^H[1-7]/.test(a) && !!s,
          c = /^BLOCKQUOTE|^TABLE|^TBODY|^TR|^HR|^UL|^OL/.test(a);
        return n + (l || c ? "\n" : "");
      }), e = e.trim();
    }
    return e;
  }
  function ko(i) {
    var t = $(i),
      e = t.offset(),
      o = t.outerHeight(!0);
    return {
      left: e.left,
      top: e.top + o
    };
  }
  function wo(i, t) {
    Object.keys(t).forEach(function (e) {
      i.on(e, t[e]);
    });
  }
  function xo(i, t) {
    Object.keys(t).forEach(function (e) {
      i.off(e, t[e]);
    });
  }
  function $o(i) {
    return i && !D(i) && u.contains(i.classList, "note-styletag");
  }
  var r = {
    NBSP_CHAR: ht,
    ZERO_WIDTH_NBSP_CHAR: Be,
    blank: ot,
    emptyPara: "<p>".concat(ot, "</p>"),
    makePredByNodeName: E,
    isEditable: H,
    isControlSizing: Oe,
    isText: D,
    isElement: Ue,
    isVoid: tt,
    isPara: q,
    isPurePara: Ke,
    isHeading: je,
    isInline: et,
    isBlock: v.not(et),
    isBodyInline: _e,
    isBody: Ge,
    isParaInline: qe,
    isPre: We,
    isList: ft,
    isTable: ut,
    isData: Ht,
    isCell: Dt,
    isBlockquote: pt,
    isBodyContainer: mt,
    isAnchor: Mt,
    isDiv: E("DIV"),
    isLi: dt,
    isBR: E("BR"),
    isSpan: E("SPAN"),
    isB: E("B"),
    isU: E("U"),
    isS: E("S"),
    isI: E("I"),
    isImg: E("IMG"),
    isTextarea: Zt,
    deepestChildIsEmpty: Xe,
    isEmpty: _,
    isEmptyAnchor: v.and(Mt, _),
    isClosestSibling: Ze,
    withClosestSiblings: Ye,
    nodeLength: F,
    isLeftEdgePoint: nt,
    isRightEdgePoint: Z,
    isEdgePoint: Ot,
    isLeftEdgeOf: Ut,
    isRightEdgeOf: jt,
    isLeftEdgePointOf: no,
    isRightEdgePointOf: so,
    prevPoint: Wt,
    nextPoint: Kt,
    nextPointWithEmptyNode: Vt,
    isSamePoint: _t,
    isVisiblePoint: ro,
    prevPointUntil: ao,
    nextPointUntil: lo,
    isCharPoint: co,
    isSpacePoint: ho,
    walkPoint: uo,
    ancestor: it,
    singleChildAncestor: Qe,
    listAncestor: W,
    lastAncestor: Je,
    listNext: Bt,
    listPrev: eo,
    listDescendant: oo,
    commonAncestor: to,
    wrap: io,
    insertAfter: gt,
    appendChildNodes: bt,
    position: K,
    hasChildren: Y,
    makeOffsetPath: fo,
    fromOffsetPath: po,
    splitTree: Gt,
    splitPoint: mo,
    create: Ct,
    createText: go,
    remove: X,
    removeWhile: bo,
    replace: vo,
    html: Co,
    value: Yt,
    posFromPlaceholder: ko,
    attachEvents: wo,
    detachEvents: xo,
    isCustomStyleTag: $o
  };
  var yo = /*#__PURE__*/function () {
    function yo(t, e) {
      _classCallCheck(this, yo);
      this.$note = t, this.memos = {}, this.modules = {}, this.layoutInfo = {}, this.options = $.extend(!0, {}, e), $.summernote.ui = $.summernote.ui_template(this.options), this.ui = $.summernote.ui, this.initialize();
    }
    return _createClass(yo, [{
      key: "initialize",
      value: function initialize() {
        return this.layoutInfo = this.ui.createLayout(this.$note), this._initialize(), this.$note.hide(), this;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this._destroy(), this.$note.removeData("summernote"), this.ui.removeLayout(this.$note, this.layoutInfo);
      }
    }, {
      key: "reset",
      value: function reset() {
        var t = this.isDisabled();
        this.code(r.emptyPara), this._destroy(), this._initialize(), t && this.disable();
      }
    }, {
      key: "_initialize",
      value: function _initialize() {
        var _this = this;
        this.options.id = v.uniqueId($.now()), this.options.container = this.options.container || this.layoutInfo.editor;
        var t = $.extend({}, this.options.buttons);
        Object.keys(t).forEach(function (o) {
          _this.memo("button." + o, t[o]);
        });
        var e = $.extend({}, this.options.modules, $.summernote.plugins || {});
        Object.keys(e).forEach(function (o) {
          _this.module(o, e[o], !0);
        }), Object.keys(this.modules).forEach(function (o) {
          _this.initializeModule(o);
        });
      }
    }, {
      key: "_destroy",
      value: function _destroy() {
        var _this2 = this;
        Object.keys(this.modules).reverse().forEach(function (t) {
          _this2.removeModule(t);
        }), Object.keys(this.memos).forEach(function (t) {
          _this2.removeMemo(t);
        }), this.triggerEvent("destroy", this);
      }
    }, {
      key: "code",
      value: function code(t) {
        var e = this.invoke("codeview.isActivated");
        if (t === void 0) return this.invoke("codeview.sync"), e ? this.layoutInfo.codable.val() : this.layoutInfo.editable.html();
        e ? this.invoke("codeview.sync", t) : this.layoutInfo.editable.html(t), this.$note.val(t), this.triggerEvent("change", t, this.layoutInfo.editable);
      }
    }, {
      key: "isDisabled",
      value: function isDisabled() {
        return this.layoutInfo.editable.attr("contenteditable") === "false";
      }
    }, {
      key: "enable",
      value: function enable() {
        this.layoutInfo.editable.attr("contenteditable", !0), this.invoke("toolbar.activate", !0), this.triggerEvent("disable", !1), this.options.editing = !0;
      }
    }, {
      key: "disable",
      value: function disable() {
        this.invoke("codeview.isActivated") && this.invoke("codeview.deactivate"), this.layoutInfo.editable.attr("contenteditable", !1), this.options.editing = !1, this.invoke("toolbar.deactivate", !0), this.triggerEvent("disable", !0);
      }
    }, {
      key: "triggerEvent",
      value: function triggerEvent() {
        var t = u.head(arguments),
          e = u.tail(u.from(arguments)),
          o = this.options.callbacks[v.namespaceToCamel(t, "on")];
        o && o.apply(this.$note[0], e), this.$note.trigger("summernote." + t, e);
      }
    }, {
      key: "initializeModule",
      value: function initializeModule(t) {
        var e = this.modules[t];
        e.shouldInitialize = e.shouldInitialize || v.ok, e.shouldInitialize() && (e.initialize && e.initialize(), e.events && r.attachEvents(this.$note, e.events));
      }
    }, {
      key: "module",
      value: function module(t, e, o) {
        if (arguments.length === 1) return this.modules[t];
        this.modules[t] = new e(this), o || this.initializeModule(t);
      }
    }, {
      key: "removeModule",
      value: function removeModule(t) {
        var e = this.modules[t];
        e.shouldInitialize() && (e.events && r.detachEvents(this.$note, e.events), e.destroy && e.destroy()), delete this.modules[t];
      }
    }, {
      key: "memo",
      value: function memo(t, e) {
        if (arguments.length === 1) return this.memos[t];
        this.memos[t] = e;
      }
    }, {
      key: "removeMemo",
      value: function removeMemo(t) {
        this.memos[t] && this.memos[t].destroy && this.memos[t].destroy(), delete this.memos[t];
      }
    }, {
      key: "createInvokeHandlerAndUpdateState",
      value: function createInvokeHandlerAndUpdateState(t, e) {
        var _this3 = this;
        return function (o) {
          _this3.createInvokeHandler(t, e)(o), _this3.invoke("buttons.updateCurrentStyle");
        };
      }
    }, {
      key: "createInvokeHandler",
      value: function createInvokeHandler(t, e) {
        var _this4 = this;
        return function (o) {
          o.preventDefault();
          var n = $(o.target);
          _this4.invoke(t, e || n.closest("[data-value]").data("value"), n);
        };
      }
    }, {
      key: "invoke",
      value: function invoke() {
        var t = u.head(arguments),
          e = u.tail(u.from(arguments)),
          o = t.split("."),
          n = o.length > 1,
          s = n && u.head(o),
          a = n ? u.last(o) : u.head(o),
          l = this.modules[s || "editor"];
        if (!s && this[a]) return this[a].apply(this, e);
        if (l && l[a] && l.shouldInitialize()) return l[a].apply(l, e);
      }
    }]);
  }();
  $.fn.extend({
    summernote: function summernote() {
      var i = _typeof(u.head(arguments)),
        t = i === "string",
        e = i === "object",
        o = $.extend({}, $.summernote.options, e ? u.head(arguments) : {});
      o.langInfo = $.extend(!0, {}, $.summernote.lang["en-US"], $.summernote.lang[o.lang]), o.icons = $.extend(!0, {}, $.summernote.options.icons, o.icons), o.tooltip = o.tooltip === "auto" ? !S.isSupportTouch : o.tooltip, this.each(function (s, a) {
        var l = $(a);
        if (!l.data("summernote")) {
          var c = new yo(l, o);
          l.data("summernote", c), l.data("summernote").triggerEvent("init", c.layoutInfo);
        }
      });
      var n = this.first();
      if (n.length) {
        var s = n.data("summernote");
        if (t) return s.invoke.apply(s, u.from(arguments));
        o.focus && s.invoke("editor.focus");
      }
      return this;
    }
  });
  function Xt(i, t) {
    var e = i.parentElement(),
      o;
    var n = document.body.createTextRange();
    var s;
    var a = u.from(e.childNodes);
    for (o = 0; o < a.length; o++) if (!r.isText(a[o])) {
      if (n.moveToElementText(a[o]), n.compareEndPoints("StartToStart", i) >= 0) break;
      s = a[o];
    }
    if (o !== 0 && r.isText(a[o - 1])) {
      var l = document.body.createTextRange();
      var c = null;
      l.moveToElementText(s || e), l.collapse(!s), c = s ? s.nextSibling : e.firstChild;
      var h = i.duplicate();
      h.setEndPoint("StartToStart", l);
      var d = h.text.replace(/[\r\n]/g, "").length;
      for (; d > c.nodeValue.length && c.nextSibling;) d -= c.nodeValue.length, c = c.nextSibling;
      c.nodeValue, t && c.nextSibling && r.isText(c.nextSibling) && d === c.nodeValue.length && (d -= c.nodeValue.length, c = c.nextSibling), e = c, o = d;
    }
    return {
      cont: e,
      offset: o
    };
  }
  function Qt(i) {
    var _t2 = function t(n, s) {
        var a, l;
        if (r.isText(n)) {
          var c = r.listPrev(n, v.not(r.isText)),
            h = u.last(c).previousSibling;
          a = h || n.parentNode, s += u.sum(u.tail(c), r.nodeLength), l = !h;
        } else {
          if (a = n.childNodes[s] || n, r.isText(a)) return _t2(a, 0);
          s = 0, l = !1;
        }
        return {
          node: a,
          collapseToStart: l,
          offset: s
        };
      },
      e = document.body.createTextRange(),
      o = _t2(i.node, i.offset);
    return e.moveToElementText(o.node), e.collapse(o.collapseToStart), e.moveStart("character", o.offset), e;
  }
  var R = /*#__PURE__*/function () {
    function R(t, e, o, n) {
      _classCallCheck(this, R);
      this.sc = t, this.so = e, this.ec = o, this.eo = n, this.isOnEditable = this.makeIsOn(r.isEditable), this.isOnList = this.makeIsOn(r.isList), this.isOnAnchor = this.makeIsOn(r.isAnchor), this.isOnCell = this.makeIsOn(r.isCell), this.isOnData = this.makeIsOn(r.isData);
    }
    return _createClass(R, [{
      key: "nativeRange",
      value: function nativeRange() {
        if (S.isW3CRangeSupport) {
          var t = document.createRange();
          return t.setStart(this.sc, this.so), t.setEnd(this.ec, this.eo), t;
        } else {
          var _t3 = Qt({
            node: this.sc,
            offset: this.so
          });
          return _t3.setEndPoint("EndToEnd", Qt({
            node: this.ec,
            offset: this.eo
          })), _t3;
        }
      }
    }, {
      key: "getPoints",
      value: function getPoints() {
        return {
          sc: this.sc,
          so: this.so,
          ec: this.ec,
          eo: this.eo
        };
      }
    }, {
      key: "getStartPoint",
      value: function getStartPoint() {
        return {
          node: this.sc,
          offset: this.so
        };
      }
    }, {
      key: "getEndPoint",
      value: function getEndPoint() {
        return {
          node: this.ec,
          offset: this.eo
        };
      }
    }, {
      key: "select",
      value: function select() {
        var t = this.nativeRange();
        if (S.isW3CRangeSupport) {
          var e = document.getSelection();
          e.rangeCount > 0 && e.removeAllRanges(), e.addRange(t);
        } else t.select();
        return this;
      }
    }, {
      key: "scrollIntoView",
      value: function scrollIntoView(t) {
        var e = $(t).height();
        return t.scrollTop + e < this.sc.offsetTop && (t.scrollTop += Math.abs(t.scrollTop + e - this.sc.offsetTop)), this;
      }
    }, {
      key: "normalize",
      value: function normalize() {
        var t = function t(n, s) {
            if (!n || r.isVisiblePoint(n) && (!r.isEdgePoint(n) || r.isRightEdgePoint(n) && !s || r.isLeftEdgePoint(n) && s || r.isRightEdgePoint(n) && s && r.isVoid(n.node.nextSibling) || r.isLeftEdgePoint(n) && !s && r.isVoid(n.node.previousSibling) || r.isBlock(n.node) && r.isEmpty(n.node))) return n;
            var a = r.ancestor(n.node, r.isBlock);
            var l = !1;
            if (!l) {
              var d = r.prevPoint(n) || {
                node: null
              };
              l = (r.isLeftEdgePointOf(n, a) || r.isVoid(d.node)) && !s;
            }
            var c = !1;
            if (!c) {
              var _d = r.nextPoint(n) || {
                node: null
              };
              c = (r.isRightEdgePointOf(n, a) || r.isVoid(_d.node)) && s;
            }
            if (l || c) {
              if (r.isVisiblePoint(n)) return n;
              s = !s;
            }
            return (s ? r.nextPointUntil(r.nextPoint(n), r.isVisiblePoint) : r.prevPointUntil(r.prevPoint(n), r.isVisiblePoint)) || n;
          },
          e = t(this.getEndPoint(), !1),
          o = this.isCollapsed() ? e : t(this.getStartPoint(), !0);
        return new R(o.node, o.offset, e.node, e.offset);
      }
    }, {
      key: "nodes",
      value: function nodes(t, e) {
        t = t || v.ok;
        var o = e && e.includeAncestor,
          n = e && e.fullyContains,
          s = this.getStartPoint(),
          a = this.getEndPoint(),
          l = [],
          c = [];
        return r.walkPoint(s, a, function (h) {
          if (r.isEditable(h.node)) return;
          var d;
          n ? (r.isLeftEdgePoint(h) && c.push(h.node), r.isRightEdgePoint(h) && u.contains(c, h.node) && (d = h.node)) : o ? d = r.ancestor(h.node, t) : d = h.node, d && t(d) && l.push(d);
        }, !0), u.unique(l);
      }
    }, {
      key: "commonAncestor",
      value: function commonAncestor() {
        return r.commonAncestor(this.sc, this.ec);
      }
    }, {
      key: "expand",
      value: function expand(t) {
        var e = r.ancestor(this.sc, t),
          o = r.ancestor(this.ec, t);
        if (!e && !o) return new R(this.sc, this.so, this.ec, this.eo);
        var n = this.getPoints();
        return e && (n.sc = e, n.so = 0), o && (n.ec = o, n.eo = r.nodeLength(o)), new R(n.sc, n.so, n.ec, n.eo);
      }
    }, {
      key: "collapse",
      value: function collapse(t) {
        return t ? new R(this.sc, this.so, this.sc, this.so) : new R(this.ec, this.eo, this.ec, this.eo);
      }
    }, {
      key: "splitText",
      value: function splitText() {
        var t = this.sc === this.ec,
          e = this.getPoints();
        return r.isText(this.ec) && !r.isEdgePoint(this.getEndPoint()) && this.ec.splitText(this.eo), r.isText(this.sc) && !r.isEdgePoint(this.getStartPoint()) && (e.sc = this.sc.splitText(this.so), e.so = 0, t && (e.ec = e.sc, e.eo = this.eo - this.so)), new R(e.sc, e.so, e.ec, e.eo);
      }
    }, {
      key: "deleteContents",
      value: function deleteContents() {
        if (this.isCollapsed()) return this;
        var t = this.splitText(),
          e = t.nodes(null, {
            fullyContains: !0
          }),
          o = r.prevPointUntil(t.getStartPoint(), function (s) {
            return !u.contains(e, s.node);
          }),
          n = [];
        return $.each(e, function (s, a) {
          var l = a.parentNode;
          o.node !== l && r.nodeLength(l) === 1 && n.push(l), r.remove(a, !1);
        }), $.each(n, function (s, a) {
          r.remove(a, !1);
        }), new R(o.node, o.offset, o.node, o.offset).normalize();
      }
    }, {
      key: "makeIsOn",
      value: function makeIsOn(t) {
        return function () {
          var e = r.ancestor(this.sc, t);
          return !!e && e === r.ancestor(this.ec, t);
        };
      }
    }, {
      key: "isLeftEdgeOf",
      value: function isLeftEdgeOf(t) {
        if (!r.isLeftEdgePoint(this.getStartPoint())) return !1;
        var e = r.ancestor(this.sc, t);
        return e && r.isLeftEdgeOf(this.sc, e);
      }
    }, {
      key: "isCollapsed",
      value: function isCollapsed() {
        return this.sc === this.ec && this.so === this.eo;
      }
    }, {
      key: "wrapBodyInlineWithPara",
      value: function wrapBodyInlineWithPara() {
        if (r.isBodyContainer(this.sc) && r.isEmpty(this.sc)) return this.sc.innerHTML = r.emptyPara, new R(this.sc.firstChild, 0, this.sc.firstChild, 0);
        var t = this.normalize();
        if (r.isParaInline(this.sc) || r.isPara(this.sc)) return t;
        var e;
        if (r.isInline(t.sc)) {
          var o = r.listAncestor(t.sc, v.not(r.isInline));
          e = u.last(o), r.isInline(e) || (e = o[o.length - 2] || t.sc.childNodes[t.so]);
        } else e = t.sc.childNodes[t.so > 0 ? t.so - 1 : 0];
        if (e) {
          var _o2 = r.listPrev(e, r.isParaInline).reverse();
          if (_o2 = _o2.concat(r.listNext(e.nextSibling, r.isParaInline)), _o2.length) {
            var n = r.wrap(u.head(_o2), "p");
            r.appendChildNodes(n, u.tail(_o2));
          }
        }
        return this.normalize();
      }
    }, {
      key: "insertNode",
      value: function insertNode(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;
        var o = this;
        (r.isText(t) || r.isInline(t)) && (o = this.wrapBodyInlineWithPara().deleteContents());
        var n = r.splitPoint(o.getStartPoint(), r.isInline(t));
        return n.rightNode ? (n.rightNode.parentNode.insertBefore(t, n.rightNode), r.isEmpty(n.rightNode) && (e || r.isPara(t)) && n.rightNode.parentNode.removeChild(n.rightNode)) : n.container.appendChild(t), t;
      }
    }, {
      key: "pasteHTML",
      value: function pasteHTML(t) {
        t = ((t || "") + "").trim(t);
        var e = $("<div></div>").html(t)[0];
        var o = u.from(e.childNodes);
        var n = this;
        var s = !1;
        return n.so >= 0 && (o = o.reverse(), s = !0), o = o.map(function (a) {
          return n.insertNode(a, !r.isInline(a));
        }), s && (o = o.reverse()), o;
      }
    }, {
      key: "toString",
      value: function toString() {
        var t = this.nativeRange();
        return S.isW3CRangeSupport ? t.toString() : t.text;
      }
    }, {
      key: "getWordRange",
      value: function getWordRange(t) {
        var e = this.getEndPoint();
        if (!r.isCharPoint(e)) return this;
        var o = r.prevPointUntil(e, function (n) {
          return !r.isCharPoint(n);
        });
        return t && (e = r.nextPointUntil(e, function (n) {
          return !r.isCharPoint(n);
        })), new R(o.node, o.offset, e.node, e.offset);
      }
    }, {
      key: "getWordsRange",
      value: function getWordsRange(t) {
        var e = this.getEndPoint(),
          o = function o(s) {
            return !r.isCharPoint(s) && !r.isSpacePoint(s);
          };
        if (o(e)) return this;
        var n = r.prevPointUntil(e, o);
        return t && (e = r.nextPointUntil(e, o)), new R(n.node, n.offset, e.node, e.offset);
      }
    }, {
      key: "getWordsMatchRange",
      value: function getWordsMatchRange(t) {
        var e = this.getEndPoint(),
          o = r.prevPointUntil(e, function (l) {
            if (!r.isCharPoint(l) && !r.isSpacePoint(l)) return !0;
            var c = new R(l.node, l.offset, e.node, e.offset),
              h = t.exec(c.toString());
            return h && h.index === 0;
          }),
          n = new R(o.node, o.offset, e.node, e.offset),
          s = n.toString(),
          a = t.exec(s);
        return a && a[0].length === s.length ? n : null;
      }
    }, {
      key: "bookmark",
      value: function bookmark(t) {
        return {
          s: {
            path: r.makeOffsetPath(t, this.sc),
            offset: this.so
          },
          e: {
            path: r.makeOffsetPath(t, this.ec),
            offset: this.eo
          }
        };
      }
    }, {
      key: "paraBookmark",
      value: function paraBookmark(t) {
        return {
          s: {
            path: u.tail(r.makeOffsetPath(u.head(t), this.sc)),
            offset: this.so
          },
          e: {
            path: u.tail(r.makeOffsetPath(u.last(t), this.ec)),
            offset: this.eo
          }
        };
      }
    }, {
      key: "getClientRects",
      value: function getClientRects() {
        return this.nativeRange().getClientRects();
      }
    }]);
  }();
  var k = {
      create: function create(i, t, e, o) {
        if (arguments.length === 4) return new R(i, t, e, o);
        if (arguments.length === 2) return e = i, o = t, new R(i, t, e, o);
        {
          var n = this.createFromSelection();
          if (!n && arguments.length === 1) {
            var s = arguments[0];
            return r.isEditable(s) && (s = s.lastChild), this.createFromBodyElement(s, r.emptyPara === arguments[0].innerHTML);
          }
          return n;
        }
      },
      createFromBodyElement: function createFromBodyElement(i) {
        var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;
        var e = this.createFromNode(i);
        return e.collapse(t);
      },
      createFromSelection: function createFromSelection() {
        var i, t, e, o;
        if (S.isW3CRangeSupport) {
          var n = document.getSelection();
          if (!n || n.rangeCount === 0) return null;
          if (r.isBody(n.anchorNode)) return null;
          var s = n.getRangeAt(0);
          i = s.startContainer, t = s.startOffset, e = s.endContainer, o = s.endOffset;
        } else {
          var _n2 = document.selection.createRange(),
            _s2 = _n2.duplicate();
          _s2.collapse(!1);
          var a = _n2;
          a.collapse(!0);
          var l = Xt(a, !0),
            c = Xt(_s2, !1);
          r.isText(l.node) && r.isLeftEdgePoint(l) && r.isTextNode(c.node) && r.isRightEdgePoint(c) && c.node.nextSibling === l.node && (l = c), i = l.cont, t = l.offset, e = c.cont, o = c.offset;
        }
        return new R(i, t, e, o);
      },
      createFromNode: function createFromNode(i) {
        var t = i,
          e = 0,
          o = i,
          n = r.nodeLength(o);
        return r.isVoid(t) && (e = r.listPrev(t).length - 1, t = t.parentNode), r.isBR(o) ? (n = r.listPrev(o).length - 1, o = o.parentNode) : r.isVoid(o) && (n = r.listPrev(o).length, o = o.parentNode), this.create(t, e, o, n);
      },
      createFromNodeBefore: function createFromNodeBefore(i) {
        return this.createFromNode(i).collapse(!0);
      },
      createFromNodeAfter: function createFromNodeAfter(i) {
        return this.createFromNode(i).collapse();
      },
      createFromBookmark: function createFromBookmark(i, t) {
        var e = r.fromOffsetPath(i, t.s.path),
          o = t.s.offset,
          n = r.fromOffsetPath(i, t.e.path),
          s = t.e.offset;
        return new R(e, o, n, s);
      },
      createFromParaBookmark: function createFromParaBookmark(i, t) {
        var e = i.s.offset,
          o = i.e.offset,
          n = r.fromOffsetPath(u.head(t), i.s.path),
          s = r.fromOffsetPath(u.last(t), i.e.path);
        return new R(n, e, s, o);
      }
    },
    N = {
      BACKSPACE: 8,
      TAB: 9,
      ENTER: 13,
      ESCAPE: 27,
      SPACE: 32,
      DELETE: 46,
      LEFT: 37,
      UP: 38,
      RIGHT: 39,
      DOWN: 40,
      NUM0: 48,
      NUM1: 49,
      NUM2: 50,
      NUM3: 51,
      NUM4: 52,
      NUM5: 53,
      NUM6: 54,
      NUM7: 55,
      NUM8: 56,
      B: 66,
      E: 69,
      I: 73,
      J: 74,
      K: 75,
      L: 76,
      R: 82,
      S: 83,
      U: 85,
      V: 86,
      Y: 89,
      Z: 90,
      SLASH: 191,
      LEFTBRACKET: 219,
      BACKSLASH: 220,
      RIGHTBRACKET: 221,
      HOME: 36,
      END: 35,
      PAGEUP: 33,
      PAGEDOWN: 34
    },
    w = {
      isEdit: function isEdit(i) {
        return u.contains([N.BACKSPACE, N.TAB, N.ENTER, N.SPACE, N.DELETE], i);
      },
      isRemove: function isRemove(i) {
        return u.contains([N.BACKSPACE, N.DELETE], i);
      },
      isMove: function isMove(i) {
        return u.contains([N.LEFT, N.UP, N.RIGHT, N.DOWN], i);
      },
      isNavigation: function isNavigation(i) {
        return u.contains([N.HOME, N.END, N.PAGEUP, N.PAGEDOWN], i);
      },
      nameFromCode: v.invertObject(N),
      code: N
    };
  function So(i) {
    return $.Deferred(function (t) {
      $.extend(new FileReader(), {
        onload: function onload(e) {
          var o = e.target.result;
          t.resolve(o);
        },
        onerror: function onerror(e) {
          t.reject(e);
        }
      }).readAsDataURL(i);
    }).promise();
  }
  function To(i) {
    return $.Deferred(function (t) {
      var e = $("<img>");
      e.one("load", function () {
        e.off("error abort"), t.resolve(e);
      }).one("error abort", function () {
        e.off("load").detach(), t.reject(e);
      }).css({
        display: "none"
      }).appendTo(document.body).attr("src", i);
    }).promise();
  }
  var Eo = /*#__PURE__*/function () {
    function Eo(t) {
      _classCallCheck(this, Eo);
      this.stack = [], this.stackOffset = -1, this.context = t, this.$editable = t.layoutInfo.editable, this.editable = this.$editable[0];
    }
    return _createClass(Eo, [{
      key: "makeSnapshot",
      value: function makeSnapshot() {
        var t = k.create(this.editable),
          e = {
            s: {
              path: [],
              offset: 0
            },
            e: {
              path: [],
              offset: 0
            }
          };
        return {
          contents: this.$editable.html(),
          bookmark: t && t.isOnEditable() ? t.bookmark(this.editable) : e
        };
      }
    }, {
      key: "applySnapshot",
      value: function applySnapshot(t) {
        t.contents !== null && this.$editable.html(t.contents), t.bookmark !== null && k.createFromBookmark(this.editable, t.bookmark).select();
      }
    }, {
      key: "rewind",
      value: function rewind() {
        this.$editable.html() !== this.stack[this.stackOffset].contents && this.recordUndo(), this.stackOffset = 0, this.applySnapshot(this.stack[this.stackOffset]);
      }
    }, {
      key: "commit",
      value: function commit() {
        this.stack = [], this.stackOffset = -1, this.recordUndo();
      }
    }, {
      key: "reset",
      value: function reset() {
        this.stack = [], this.stackOffset = -1, this.$editable.html(""), this.recordUndo();
      }
    }, {
      key: "undo",
      value: function undo() {
        this.$editable.html() !== this.stack[this.stackOffset].contents && this.recordUndo(), this.stackOffset > 0 && (this.stackOffset--, this.applySnapshot(this.stack[this.stackOffset]));
      }
    }, {
      key: "redo",
      value: function redo() {
        this.stack.length - 1 > this.stackOffset && (this.stackOffset++, this.applySnapshot(this.stack[this.stackOffset]));
      }
    }, {
      key: "recordUndo",
      value: function recordUndo() {
        this.stackOffset++, this.stack.length > this.stackOffset && (this.stack = this.stack.slice(0, this.stackOffset)), this.stack.push(this.makeSnapshot()), this.stack.length > this.context.options.historyLimit && (this.stack.shift(), this.stackOffset -= 1);
      }
    }]);
  }();
  var Ro = /*#__PURE__*/function () {
    function Ro() {
      _classCallCheck(this, Ro);
    }
    return _createClass(Ro, [{
      key: "jQueryCSS",
      value: function jQueryCSS(t, e) {
        var o = {};
        return $.each(e, function (n, s) {
          o[s] = t.css(s);
        }), o;
      }
    }, {
      key: "fromNode",
      value: function fromNode(t) {
        var e = ["font-family", "font-size", "text-align", "list-style-type", "line-height"],
          o = this.jQueryCSS(t, e) || {},
          n = t[0].style.fontSize || o["font-size"];
        return o["font-size"] = parseInt(n, 10), o["font-size-unit"] = n.match(/[a-z%]+$/), o;
      }
    }, {
      key: "stylePara",
      value: function stylePara(t, e) {
        $.each(t.nodes(r.isPara, {
          includeAncestor: !0
        }), function (o, n) {
          $(n).css(e);
        });
      }
    }, {
      key: "styleNodes",
      value: function styleNodes(t, e) {
        t = t.splitText();
        var o = e && e.nodeName || "SPAN",
          n = !!(e && e.expandClosestSibling),
          s = !!(e && e.onlyPartialContains);
        if (t.isCollapsed()) return [t.insertNode(r.create(o))];
        var a = r.makePredByNodeName(o);
        var l = t.nodes(r.isText, {
          fullyContains: !0
        }).map(function (c) {
          return r.singleChildAncestor(c, a) || r.wrap(c, o);
        });
        if (n) {
          if (s) {
            var c = t.nodes();
            a = v.and(a, function (h) {
              return u.contains(c, h);
            });
          }
          return l.map(function (c) {
            var h = r.withClosestSiblings(c, a),
              d = u.head(h),
              f = u.tail(h);
            return $.each(f, function (C, b) {
              r.appendChildNodes(d, b.childNodes), r.remove(b);
            }), u.head(h);
          });
        } else return l;
      }
    }, {
      key: "current",
      value: function current(t) {
        var e = $(r.isElement(t.sc) ? t.sc : t.sc.parentNode);
        var o = this.fromNode(e);
        try {
          o = $.extend(o, {
            "font-bold": document.queryCommandState("bold") ? "bold" : "normal",
            "font-italic": document.queryCommandState("italic") ? "italic" : "normal",
            "font-underline": document.queryCommandState("underline") ? "underline" : "normal",
            "font-subscript": document.queryCommandState("subscript") ? "subscript" : "normal",
            "font-superscript": document.queryCommandState("superscript") ? "superscript" : "normal",
            "font-strikethrough": document.queryCommandState("strikethrough") ? "strikethrough" : "normal",
            "font-family": document.queryCommandValue("fontname") || o["font-family"]
          });
        } catch (_unused) {}
        if (!t.isOnList()) o["list-style"] = "none";else {
          var a = ["circle", "disc", "disc-leading-zero", "square"].indexOf(o["list-style-type"]) > -1;
          o["list-style"] = a ? "unordered" : "ordered";
        }
        var n = r.ancestor(t.sc, r.isPara);
        if (n && n.style["line-height"]) o["line-height"] = n.style.lineHeight;else {
          var s = parseInt(o["line-height"], 10) / parseInt(o["font-size"], 10);
          o["line-height"] = s.toFixed(1);
        }
        return o.anchor = t.isOnAnchor() && r.ancestor(t.sc, r.isAnchor), o.ancestors = r.listAncestor(t.sc, r.isEditable), o.range = t, o;
      }
    }]);
  }();
  var Jt = /*#__PURE__*/function () {
    function Jt() {
      _classCallCheck(this, Jt);
    }
    return _createClass(Jt, [{
      key: "insertOrderedList",
      value: function insertOrderedList(t) {
        this.toggleList("OL", t);
      }
    }, {
      key: "insertUnorderedList",
      value: function insertUnorderedList(t) {
        this.toggleList("UL", t);
      }
    }, {
      key: "indent",
      value: function indent(t) {
        var _this5 = this;
        var e = k.create(t).wrapBodyInlineWithPara(),
          o = e.nodes(r.isPara, {
            includeAncestor: !0
          }),
          n = u.clusterBy(o, v.peq2("parentNode"));
        $.each(n, function (s, a) {
          var l = u.head(a);
          if (r.isLi(l)) {
            var c = _this5.findList(l.previousSibling);
            c ? a.map(function (h) {
              return c.appendChild(h);
            }) : (_this5.wrapList(a, l.parentNode.nodeName), a.map(function (h) {
              return h.parentNode;
            }).map(function (h) {
              return _this5.appendToPrevious(h);
            }));
          } else $.each(a, function (c, h) {
            $(h).css("marginLeft", function (d, f) {
              return (parseInt(f, 10) || 0) + 25;
            });
          });
        }), e.select();
      }
    }, {
      key: "outdent",
      value: function outdent(t) {
        var _this6 = this;
        var e = k.create(t).wrapBodyInlineWithPara(),
          o = e.nodes(r.isPara, {
            includeAncestor: !0
          }),
          n = u.clusterBy(o, v.peq2("parentNode"));
        $.each(n, function (s, a) {
          var l = u.head(a);
          r.isLi(l) ? _this6.releaseList([a]) : $.each(a, function (c, h) {
            $(h).css("marginLeft", function (d, f) {
              return f = parseInt(f, 10) || 0, f > 25 ? f - 25 : "";
            });
          });
        }), e.select();
      }
    }, {
      key: "toggleList",
      value: function toggleList(t, e) {
        var _this7 = this;
        var o = k.create(e).wrapBodyInlineWithPara();
        var n = o.nodes(r.isPara, {
          includeAncestor: !0
        });
        var s = o.paraBookmark(n),
          a = u.clusterBy(n, v.peq2("parentNode"));
        if (u.find(n, r.isPurePara)) {
          var l = [];
          $.each(a, function (c, h) {
            l = l.concat(_this7.wrapList(h, t));
          }), n = l;
        } else {
          var _l = o.nodes(r.isList, {
            includeAncestor: !0
          }).filter(function (c) {
            return !$.nodeName(c, t);
          });
          _l.length ? $.each(_l, function (c, h) {
            r.replace(h, t);
          }) : n = this.releaseList(a, !0);
        }
        k.createFromParaBookmark(s, n).select();
      }
    }, {
      key: "wrapList",
      value: function wrapList(t, e) {
        var o = u.head(t),
          n = u.last(t),
          s = r.isList(o.previousSibling) && o.previousSibling,
          a = r.isList(n.nextSibling) && n.nextSibling,
          l = s || r.insertAfter(r.create(e || "UL"), n);
        return t = t.map(function (c) {
          return r.isPurePara(c) ? r.replace(c, "LI") : c;
        }), r.appendChildNodes(l, t, !0), a && (r.appendChildNodes(l, u.from(a.childNodes), !0), r.remove(a)), t;
      }
    }, {
      key: "releaseList",
      value: function releaseList(t, e) {
        var _this8 = this;
        var o = [];
        return $.each(t, function (n, s) {
          var a = u.head(s),
            l = u.last(s),
            c = e ? r.lastAncestor(a, r.isList) : a.parentNode,
            h = c.parentNode;
          if (c.parentNode.nodeName === "LI") s.map(function (d) {
            var f = _this8.findNextSiblings(d);
            h.nextSibling ? h.parentNode.insertBefore(d, h.nextSibling) : h.parentNode.appendChild(d), f.length && (_this8.wrapList(f, c.nodeName), d.appendChild(f[0].parentNode));
          }), c.children.length === 0 && h.removeChild(c), h.childNodes.length === 0 && h.parentNode.removeChild(h);else {
            var d = c.childNodes.length > 1 ? r.splitTree(c, {
                node: l.parentNode,
                offset: r.position(l) + 1
              }, {
                isSkipPaddingBlankHTML: !0
              }) : null,
              f = r.splitTree(c, {
                node: a.parentNode,
                offset: r.position(a)
              }, {
                isSkipPaddingBlankHTML: !0
              });
            s = e ? r.listDescendant(f, r.isLi) : u.from(f.childNodes).filter(r.isLi), (e || !r.isList(c.parentNode)) && (s = s.map(function (b) {
              return r.replace(b, "P");
            })), $.each(u.from(s).reverse(), function (b, T) {
              r.insertAfter(T, c);
            });
            var C = u.compact([c, f, d]);
            $.each(C, function (b, T) {
              var A = [T].concat(r.listDescendant(T, r.isList));
              $.each(A.reverse(), function (O, p) {
                r.nodeLength(p) || r.remove(p, !0);
              });
            });
          }
          o = o.concat(s);
        }), o;
      }
    }, {
      key: "appendToPrevious",
      value: function appendToPrevious(t) {
        return t.previousSibling ? r.appendChildNodes(t.previousSibling, [t]) : this.wrapList([t], "LI");
      }
    }, {
      key: "findList",
      value: function findList(t) {
        return t ? u.find(t.children, function (e) {
          return ["OL", "UL"].indexOf(e.nodeName) > -1;
        }) : null;
      }
    }, {
      key: "findNextSiblings",
      value: function findNextSiblings(t) {
        var e = [];
        for (; t.nextSibling;) e.push(t.nextSibling), t = t.nextSibling;
        return e;
      }
    }]);
  }();
  var No = /*#__PURE__*/function () {
    function No(t) {
      _classCallCheck(this, No);
      this.bullet = new Jt(), this.options = t.options;
    }
    return _createClass(No, [{
      key: "insertTab",
      value: function insertTab(t, e) {
        var o = r.createText(new Array(e + 1).join(r.NBSP_CHAR));
        t = t.deleteContents(), t.insertNode(o, !0), t = k.create(o, e), t.select();
      }
    }, {
      key: "insertParagraph",
      value: function insertParagraph(t, e) {
        e = e || k.create(t), e = e.deleteContents(), e = e.wrapBodyInlineWithPara();
        var o = r.ancestor(e.sc, r.isPara);
        var n;
        if (o) {
          if (r.isLi(o) && (r.isEmpty(o) || r.deepestChildIsEmpty(o))) {
            this.bullet.toggleList(o.parentNode.nodeName);
            return;
          } else {
            var s = null;
            if (this.options.blockquoteBreakingLevel === 1 ? s = r.ancestor(o, r.isBlockquote) : this.options.blockquoteBreakingLevel === 2 && (s = r.lastAncestor(o, r.isBlockquote)), s) {
              n = $(r.emptyPara)[0], r.isRightEdgePoint(e.getStartPoint()) && r.isBR(e.sc.nextSibling) && $(e.sc.nextSibling).remove();
              var a = r.splitTree(s, e.getStartPoint(), {
                isDiscardEmptySplits: !0
              });
              a ? a.parentNode.insertBefore(n, a) : r.insertAfter(n, s);
            } else {
              n = r.splitTree(o, e.getStartPoint());
              var _a = r.listDescendant(o, r.isEmptyAnchor);
              _a = _a.concat(r.listDescendant(n, r.isEmptyAnchor)), $.each(_a, function (l, c) {
                r.remove(c);
              }), (r.isHeading(n) || r.isPre(n) || r.isCustomStyleTag(n)) && r.isEmpty(n) && (n = r.replace(n, "p"));
            }
          }
        } else {
          var _s3 = e.sc.childNodes[e.so];
          n = $(r.emptyPara)[0], _s3 ? e.sc.insertBefore(n, _s3) : e.sc.appendChild(n);
        }
        k.create(n, 0).normalize().select().scrollIntoView(t);
      }
    }]);
  }();
  var _g = function g(i, t, e, o) {
    var n = {
        colPos: 0,
        rowPos: 0
      },
      s = [],
      a = [];
    function l() {
      !i || !i.tagName || i.tagName.toLowerCase() !== "td" && i.tagName.toLowerCase() !== "th" || (n.colPos = i.cellIndex, !(!i.parentElement || !i.parentElement.tagName || i.parentElement.tagName.toLowerCase() !== "tr") && (n.rowPos = i.parentElement.rowIndex));
    }
    function c(p, m, x, y, U, M, j) {
      var z = {
        baseRow: x,
        baseCell: y,
        isRowSpan: U,
        isColSpan: M,
        isVirtual: j
      };
      s[p] || (s[p] = []), s[p][m] = z;
    }
    function h(p, m, x, y) {
      return {
        baseCell: p.baseCell,
        action: m,
        virtualTable: {
          rowIndex: x,
          cellIndex: y
        }
      };
    }
    function d(p, m) {
      if (!s[p] || !s[p][m]) return m;
      var x = m;
      for (; s[p][x];) if (x++, !s[p][x]) return x;
    }
    function f(p, m) {
      var x = d(p.rowIndex, m.cellIndex),
        y = m.colSpan > 1,
        U = m.rowSpan > 1,
        M = p.rowIndex === n.rowPos && m.cellIndex === n.colPos;
      c(p.rowIndex, x, p, m, U, y, !1);
      var j = m.attributes.rowSpan ? parseInt(m.attributes.rowSpan.value, 10) : 0;
      if (j > 1) for (var P = 1; P < j; P++) {
        var V = p.rowIndex + P;
        C(V, x, m, M), c(V, x, p, m, !0, y, !0);
      }
      var z = m.attributes.colSpan ? parseInt(m.attributes.colSpan.value, 10) : 0;
      if (z > 1) for (var _P = 1; _P < z; _P++) {
        var _V = d(p.rowIndex, x + _P);
        C(p.rowIndex, _V, m, M), c(p.rowIndex, _V, p, m, U, !0, !0);
      }
    }
    function C(p, m, x, y) {
      p === n.rowPos && n.colPos >= x.cellIndex && x.cellIndex <= m && !y && n.colPos++;
    }
    function b() {
      var p = o.rows;
      for (var m = 0; m < p.length; m++) {
        var x = p[m].cells;
        for (var y = 0; y < x.length; y++) f(p[m], x[y]);
      }
    }
    function T(p) {
      switch (t) {
        case _g.where.Column:
          if (p.isColSpan) return _g.resultAction.SubtractSpanCount;
          break;
        case _g.where.Row:
          if (!p.isVirtual && p.isRowSpan) return _g.resultAction.AddCell;
          if (p.isRowSpan) return _g.resultAction.SubtractSpanCount;
          break;
      }
      return _g.resultAction.RemoveCell;
    }
    function A(p) {
      switch (t) {
        case _g.where.Column:
          if (p.isColSpan) return _g.resultAction.SumSpanCount;
          if (p.isRowSpan && p.isVirtual) return _g.resultAction.Ignore;
          break;
        case _g.where.Row:
          if (p.isRowSpan) return _g.resultAction.SumSpanCount;
          if (p.isColSpan && p.isVirtual) return _g.resultAction.Ignore;
          break;
      }
      return _g.resultAction.AddCell;
    }
    function O() {
      l(), b();
    }
    this.getActionList = function () {
      var p = t === _g.where.Row ? n.rowPos : -1,
        m = t === _g.where.Column ? n.colPos : -1;
      var x = 0,
        y = !0;
      for (; y;) {
        var U = p >= 0 ? p : x,
          M = m >= 0 ? m : x,
          j = s[U];
        if (!j) return y = !1, a;
        var z = j[M];
        if (!z) return y = !1, a;
        var P = _g.resultAction.Ignore;
        switch (e) {
          case _g.requestAction.Add:
            P = A(z);
            break;
          case _g.requestAction.Delete:
            P = T(z);
            break;
        }
        a.push(h(z, P, U, M)), x++;
      }
      return a;
    }, O();
  };
  _g.where = {
    Row: 0,
    Column: 1
  }, _g.requestAction = {
    Add: 0,
    Delete: 1
  }, _g.resultAction = {
    Ignore: 0,
    SubtractSpanCount: 1,
    RemoveCell: 2,
    AddCell: 3,
    SumSpanCount: 4
  };
  var Io = /*#__PURE__*/function () {
    function Io() {
      _classCallCheck(this, Io);
    }
    return _createClass(Io, [{
      key: "tab",
      value: function tab(t, e) {
        var o = r.ancestor(t.commonAncestor(), r.isCell),
          n = r.ancestor(o, r.isTable),
          s = r.listDescendant(n, r.isCell),
          a = u[e ? "prev" : "next"](s, o);
        a && k.create(a, 0).select();
      }
    }, {
      key: "addRow",
      value: function addRow(t, e) {
        var o = r.ancestor(t.commonAncestor(), r.isCell),
          n = $(o).closest("tr"),
          s = this.recoverAttributes(n),
          a = $("<tr" + s + "></tr>"),
          c = new _g(o, _g.where.Row, _g.requestAction.Add, $(n).closest("table")[0]).getActionList();
        for (var h = 0; h < c.length; h++) {
          var d = c[h],
            f = this.recoverAttributes(d.baseCell);
          switch (d.action) {
            case _g.resultAction.AddCell:
              a.append("<td" + f + ">" + r.blank + "</td>");
              break;
            case _g.resultAction.SumSpanCount:
              {
                if (e === "top" && (d.baseCell.parent ? d.baseCell.closest("tr").rowIndex : 0) <= n[0].rowIndex) {
                  var A = $("<div></div>").append($("<td" + f + ">" + r.blank + "</td>").removeAttr("rowspan")).html();
                  a.append(A);
                  break;
                }
                var C = parseInt(d.baseCell.rowSpan, 10);
                C++, d.baseCell.setAttribute("rowSpan", C);
              }
              break;
          }
        }
        if (e === "top") n.before(a);else {
          if (o.rowSpan > 1) {
            var _d2 = n[0].rowIndex + (o.rowSpan - 2);
            $($(n).parent().find("tr")[_d2]).after($(a));
            return;
          }
          n.after(a);
        }
      }
    }, {
      key: "addCol",
      value: function addCol(t, e) {
        var o = r.ancestor(t.commonAncestor(), r.isCell),
          n = $(o).closest("tr");
        $(n).siblings().push(n);
        var l = new _g(o, _g.where.Column, _g.requestAction.Add, $(n).closest("table")[0]).getActionList();
        for (var c = 0; c < l.length; c++) {
          var h = l[c],
            d = this.recoverAttributes(h.baseCell);
          switch (h.action) {
            case _g.resultAction.AddCell:
              e === "right" ? $(h.baseCell).after("<td" + d + ">" + r.blank + "</td>") : $(h.baseCell).before("<td" + d + ">" + r.blank + "</td>");
              break;
            case _g.resultAction.SumSpanCount:
              if (e === "right") {
                var f = parseInt(h.baseCell.colSpan, 10);
                f++, h.baseCell.setAttribute("colSpan", f);
              } else $(h.baseCell).before("<td" + d + ">" + r.blank + "</td>");
              break;
          }
        }
      }
    }, {
      key: "recoverAttributes",
      value: function recoverAttributes(t) {
        var e = "";
        if (!t) return e;
        var o = t.attributes || [];
        for (var n = 0; n < o.length; n++) o[n].name.toLowerCase() !== "id" && o[n].specified && (e += " " + o[n].name + "='" + o[n].value + "'");
        return e;
      }
    }, {
      key: "deleteRow",
      value: function deleteRow(t) {
        var e = r.ancestor(t.commonAncestor(), r.isCell),
          o = $(e).closest("tr"),
          n = o.children("td, th").index($(e)),
          s = o[0].rowIndex,
          l = new _g(e, _g.where.Row, _g.requestAction.Delete, $(o).closest("table")[0]).getActionList();
        for (var c = 0; c < l.length; c++) {
          if (!l[c]) continue;
          var h = l[c].baseCell,
            d = l[c].virtualTable,
            f = h.rowSpan && h.rowSpan > 1;
          var C = f ? parseInt(h.rowSpan, 10) : 0;
          switch (l[c].action) {
            case _g.resultAction.Ignore:
              continue;
            case _g.resultAction.AddCell:
              {
                var b = o.next("tr")[0];
                if (!b) continue;
                var T = o[0].cells[n];
                f && (C > 2 ? (C--, b.insertBefore(T, b.cells[n]), b.cells[n].setAttribute("rowSpan", C), b.cells[n].innerHTML = "") : C === 2 && (b.insertBefore(T, b.cells[n]), b.cells[n].removeAttribute("rowSpan"), b.cells[n].innerHTML = ""));
              }
              continue;
            case _g.resultAction.SubtractSpanCount:
              f && (C > 2 ? (C--, h.setAttribute("rowSpan", C), d.rowIndex !== s && h.cellIndex === n && (h.innerHTML = "")) : C === 2 && (h.removeAttribute("rowSpan"), d.rowIndex !== s && h.cellIndex === n && (h.innerHTML = "")));
              continue;
            case _g.resultAction.RemoveCell:
              continue;
          }
        }
        o.remove();
      }
    }, {
      key: "deleteCol",
      value: function deleteCol(t) {
        var e = r.ancestor(t.commonAncestor(), r.isCell),
          o = $(e).closest("tr"),
          n = o.children("td, th").index($(e)),
          a = new _g(e, _g.where.Column, _g.requestAction.Delete, $(o).closest("table")[0]).getActionList();
        for (var l = 0; l < a.length; l++) if (a[l]) switch (a[l].action) {
          case _g.resultAction.Ignore:
            continue;
          case _g.resultAction.SubtractSpanCount:
            {
              var c = a[l].baseCell;
              if (c.colSpan && c.colSpan > 1) {
                var d = c.colSpan ? parseInt(c.colSpan, 10) : 0;
                d > 2 ? (d--, c.setAttribute("colSpan", d), c.cellIndex === n && (c.innerHTML = "")) : d === 2 && (c.removeAttribute("colSpan"), c.cellIndex === n && (c.innerHTML = ""));
              }
            }
            continue;
          case _g.resultAction.RemoveCell:
            r.remove(a[l].baseCell, !0);
            continue;
        }
      }
    }, {
      key: "createTable",
      value: function createTable(t, e, o) {
        var n = [];
        var s;
        for (var h = 0; h < t; h++) n.push("<td>" + r.blank + "</td>");
        s = n.join("");
        var a = [];
        var l;
        for (var _h = 0; _h < e; _h++) a.push("<tr>" + s + "</tr>");
        l = a.join("");
        var c = $("<table>" + l + "</table>");
        return o && o.tableClassName && c.addClass(o.tableClassName), c[0];
      }
    }, {
      key: "deleteTable",
      value: function deleteTable(t) {
        var e = r.ancestor(t.commonAncestor(), r.isCell);
        $(e).closest("table").remove();
      }
    }]);
  }();
  var Ao = "bogus",
    Po = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/,
    Lo = /^(\+?\d{1,3}[\s-]?)?(\d{1,4})[\s-]?(\d{1,4})[\s-]?(\d{1,4})$/,
    Fo = /^([A-Za-z][A-Za-z0-9+-.]*\:|#|\/)/;
  var Ho = /*#__PURE__*/function () {
    function Ho(t) {
      var _this9 = this;
      _classCallCheck(this, Ho);
      this.context = t, this.$note = t.layoutInfo.note, this.$editor = t.layoutInfo.editor, this.$editable = t.layoutInfo.editable, this.options = t.options, this.lang = this.options.langInfo, this.editable = this.$editable[0], this.lastRange = null, this.snapshot = null, this.style = new Ro(), this.table = new Io(), this.typing = new No(t), this.bullet = new Jt(), this.history = new Eo(t), this.context.memo("help.escape", this.lang.help.escape), this.context.memo("help.undo", this.lang.help.undo), this.context.memo("help.redo", this.lang.help.redo), this.context.memo("help.tab", this.lang.help.tab), this.context.memo("help.untab", this.lang.help.untab), this.context.memo("help.insertParagraph", this.lang.help.insertParagraph), this.context.memo("help.insertOrderedList", this.lang.help.insertOrderedList), this.context.memo("help.insertUnorderedList", this.lang.help.insertUnorderedList), this.context.memo("help.indent", this.lang.help.indent), this.context.memo("help.outdent", this.lang.help.outdent), this.context.memo("help.formatPara", this.lang.help.formatPara), this.context.memo("help.insertHorizontalRule", this.lang.help.insertHorizontalRule), this.context.memo("help.fontName", this.lang.help.fontName);
      var e = ["bold", "italic", "underline", "strikethrough", "superscript", "subscript", "justifyLeft", "justifyCenter", "justifyRight", "justifyFull", "formatBlock", "removeFormat", "backColor"];
      for (var o = 0, n = e.length; o < n; o++) this[e[o]] = function (s) {
        return function (a) {
          _this9.beforeCommand(), document.execCommand(s, !1, a), _this9.afterCommand(!0);
        };
      }(e[o]), this.context.memo("help." + e[o], this.lang.help[e[o]]);
      this.fontName = this.wrapCommand(function (o) {
        return _this9.fontStyling("font-family", S.validFontName(o));
      }), this.fontSize = this.wrapCommand(function (o) {
        var n = _this9.currentStyle()["font-size-unit"];
        return _this9.fontStyling("font-size", o + n);
      }), this.fontSizeUnit = this.wrapCommand(function (o) {
        var n = _this9.currentStyle()["font-size"];
        return _this9.fontStyling("font-size", n + o);
      });
      for (var _o3 = 1; _o3 <= 6; _o3++) this["formatH" + _o3] = function (n) {
        return function () {
          _this9.formatBlock("H" + n);
        };
      }(_o3), this.context.memo("help.formatH" + _o3, this.lang.help["formatH" + _o3]);
      this.insertParagraph = this.wrapCommand(function () {
        _this9.typing.insertParagraph(_this9.editable);
      }), this.insertOrderedList = this.wrapCommand(function () {
        _this9.bullet.insertOrderedList(_this9.editable);
      }), this.insertUnorderedList = this.wrapCommand(function () {
        _this9.bullet.insertUnorderedList(_this9.editable);
      }), this.indent = this.wrapCommand(function () {
        _this9.bullet.indent(_this9.editable);
      }), this.outdent = this.wrapCommand(function () {
        _this9.bullet.outdent(_this9.editable);
      }), this.insertNode = this.wrapCommand(function (o) {
        if (_this9.isLimited($(o).text().length)) return;
        _this9.getLastRange().insertNode(o), _this9.setLastRange(k.createFromNodeAfter(o).select());
      }), this.insertText = this.wrapCommand(function (o) {
        if (_this9.isLimited(o.length)) return;
        var s = _this9.getLastRange().insertNode(r.createText(o));
        _this9.setLastRange(k.create(s, r.nodeLength(s)).select());
      }), this.pasteHTML = this.wrapCommand(function (o) {
        if (_this9.isLimited(o.length)) return;
        o = _this9.context.invoke("codeview.purify", o);
        var n = _this9.getLastRange().pasteHTML(o);
        _this9.setLastRange(k.createFromNodeAfter(u.last(n)).select());
      }), this.formatBlock = this.wrapCommand(function (o, n) {
        var s = _this9.options.callbacks.onApplyCustomStyle;
        s ? s.call(_this9, n, _this9.context, _this9.onFormatBlock) : _this9.onFormatBlock(o, n);
      }), this.insertHorizontalRule = this.wrapCommand(function () {
        var o = _this9.getLastRange().insertNode(r.create("HR"));
        o.nextSibling && _this9.setLastRange(k.create(o.nextSibling, 0).normalize().select());
      }), this.lineHeight = this.wrapCommand(function (o) {
        _this9.style.stylePara(_this9.getLastRange(), {
          lineHeight: o
        });
      }), this.createLink = this.wrapCommand(function (o) {
        var n = [],
          s = o.url;
        var a = o.text,
          l = o.isNewWindow,
          c = _this9.options.linkAddNoReferrer,
          h = _this9.options.linkAddNoOpener;
        var d = o.range || _this9.getLastRange();
        var f = a.length - d.toString().length;
        if (f > 0 && _this9.isLimited(f)) return;
        var C = d.toString() !== a;
        typeof s == "string" && (s = s.trim()), _this9.options.onCreateLink ? s = _this9.options.onCreateLink(s) : s = _this9.checkLinkUrl(s);
        var b = [];
        if (C) {
          d = d.deleteContents();
          var T = d.insertNode($("<A></A>").text(a)[0]);
          b.push(T);
        } else b = _this9.style.styleNodes(d, {
          nodeName: "A",
          expandClosestSibling: !0,
          onlyPartialContains: !0
        });
        $.each(b, function (T, A) {
          $(A).attr("href", s), l ? ($(A).attr("target", "_blank"), c && n.push("noreferrer"), h && n.push("noopener"), n.length && $(A).attr("rel", n.join(" "))) : $(A).removeAttr("target");
        }), _this9.setLastRange(_this9.createRangeFromList(b).select());
      }), this.color = this.wrapCommand(function (o) {
        var n = o.foreColor,
          s = o.backColor;
        n && document.execCommand("foreColor", !1, n), s && document.execCommand("backColor", !1, s);
      }), this.foreColor = this.wrapCommand(function (o) {
        document.execCommand("foreColor", !1, o);
      }), this.insertTable = this.wrapCommand(function (o) {
        var n = o.split("x");
        _this9.getLastRange().deleteContents().insertNode(_this9.table.createTable(n[0], n[1], _this9.options));
      }), this.removeMedia = this.wrapCommand(function () {
        var o = $(_this9.restoreTarget()).parent();
        o.closest("figure").length ? o.closest("figure").remove() : o = $(_this9.restoreTarget()).detach(), _this9.setLastRange(k.createFromSelection(o).select()), _this9.context.triggerEvent("media.delete", o, _this9.$editable);
      }), this.floatMe = this.wrapCommand(function (o) {
        var n = $(_this9.restoreTarget());
        n.toggleClass("note-float-left", o === "left"), n.toggleClass("note-float-right", o === "right"), n.css("float", o === "none" ? "" : o);
      }), this.resize = this.wrapCommand(function (o) {
        var n = $(_this9.restoreTarget());
        o = parseFloat(o), o === 0 ? n.css("width", "") : n.css({
          width: o * 100 + "%",
          height: ""
        });
      });
    }
    return _createClass(Ho, [{
      key: "initialize",
      value: function initialize() {
        var _this10 = this;
        this.$editable.on("keydown", function (t) {
          if (t.keyCode === w.code.ENTER && _this10.context.triggerEvent("enter", t), _this10.context.triggerEvent("keydown", t), _this10.snapshot = _this10.history.makeSnapshot(), _this10.hasKeyShortCut = !1, t.isDefaultPrevented() || (_this10.options.shortcuts ? _this10.hasKeyShortCut = _this10.handleKeyMap(t) : _this10.preventDefaultEditableShortCuts(t)), _this10.isLimited(1, t)) {
            var e = _this10.getLastRange();
            if (e.eo - e.so === 0) return !1;
          }
          _this10.setLastRange(), _this10.options.recordEveryKeystroke && _this10.hasKeyShortCut === !1 && _this10.history.recordUndo();
        }).on("keyup", function (t) {
          _this10.setLastRange(), _this10.context.triggerEvent("keyup", t);
        }).on("focus", function (t) {
          _this10.setLastRange(), _this10.context.triggerEvent("focus", t);
        }).on("blur", function (t) {
          _this10.context.triggerEvent("blur", t);
        }).on("mousedown", function (t) {
          _this10.context.triggerEvent("mousedown", t);
        }).on("mouseup", function (t) {
          _this10.setLastRange(), _this10.history.recordUndo(), _this10.context.triggerEvent("mouseup", t);
        }).on("scroll", function (t) {
          _this10.context.triggerEvent("scroll", t);
        }).on("paste", function (t) {
          _this10.setLastRange(), _this10.context.triggerEvent("paste", t);
        }).on("copy", function (t) {
          _this10.context.triggerEvent("copy", t);
        }).on("input", function () {
          _this10.isLimited(0) && _this10.snapshot && _this10.history.applySnapshot(_this10.snapshot);
        }), this.$editable.attr("spellcheck", this.options.spellCheck), this.$editable.attr("autocorrect", this.options.spellCheck), this.options.disableGrammar && this.$editable.attr("data-gramm", !1), this.$editable.html(r.html(this.$note) || r.emptyPara), this.$editable.on(S.inputEventName, v.debounce(function () {
          _this10.context.triggerEvent("change", _this10.$editable.html(), _this10.$editable);
        }, 10)), this.$editable.on("focusin", function (t) {
          _this10.context.triggerEvent("focusin", t);
        }).on("focusout", function (t) {
          _this10.context.triggerEvent("focusout", t);
        }), this.options.airMode ? this.options.overrideContextMenu && this.$editor.on("contextmenu", function (t) {
          return _this10.context.triggerEvent("contextmenu", t), !1;
        }) : (this.options.width && this.$editor.outerWidth(this.options.width), this.options.height && this.$editable.outerHeight(this.options.height), this.options.maxHeight && this.$editable.css("max-height", this.options.maxHeight), this.options.minHeight && this.$editable.css("min-height", this.options.minHeight)), this.history.recordUndo(), this.setLastRange();
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.$editable.off();
      }
    }, {
      key: "handleKeyMap",
      value: function handleKeyMap(t) {
        var e = this.options.keyMap[S.isMac ? "mac" : "pc"],
          o = [];
        t.metaKey && o.push("CMD"), t.ctrlKey && !t.altKey && o.push("CTRL"), t.shiftKey && o.push("SHIFT");
        var n = w.nameFromCode[t.keyCode];
        n && o.push(n);
        var s = e[o.join("+")];
        if (n === "TAB" && !this.options.tabDisable) this.afterCommand();else if (s) {
          if (this.context.invoke(s) !== !1) return t.preventDefault(), !0;
        } else w.isEdit(t.keyCode) && (w.isRemove(t.keyCode) && this.context.invoke("removed"), this.afterCommand());
        return !1;
      }
    }, {
      key: "preventDefaultEditableShortCuts",
      value: function preventDefaultEditableShortCuts(t) {
        (t.ctrlKey || t.metaKey) && u.contains([66, 73, 85], t.keyCode) && t.preventDefault();
      }
    }, {
      key: "isLimited",
      value: function isLimited(t, e) {
        return t = t || 0, _typeof(e) < "u" && (w.isMove(e.keyCode) || w.isNavigation(e.keyCode) || e.ctrlKey || e.metaKey || u.contains([w.code.BACKSPACE, w.code.DELETE], e.keyCode)) ? !1 : this.options.maxTextLength > 0 && this.$editable.text().length + t > this.options.maxTextLength;
      }
    }, {
      key: "checkLinkUrl",
      value: function checkLinkUrl(t) {
        return Po.test(t) ? "mailto://" + t : Lo.test(t) ? "tel://" + t : Fo.test(t) ? t : "http://" + t;
      }
    }, {
      key: "createRange",
      value: function createRange() {
        return this.focus(), this.setLastRange(), this.getLastRange();
      }
    }, {
      key: "createRangeFromList",
      value: function createRangeFromList(t) {
        var o = k.createFromNodeBefore(u.head(t)).getStartPoint(),
          s = k.createFromNodeAfter(u.last(t)).getEndPoint();
        return k.create(o.node, o.offset, s.node, s.offset);
      }
    }, {
      key: "setLastRange",
      value: function setLastRange(t) {
        t ? this.lastRange = t : (this.lastRange = k.create(this.editable), $(this.lastRange.sc).closest(".note-editable").length === 0 && (this.lastRange = k.createFromBodyElement(this.editable)));
      }
    }, {
      key: "getLastRange",
      value: function getLastRange() {
        return this.lastRange || this.setLastRange(), this.lastRange;
      }
    }, {
      key: "saveRange",
      value: function saveRange(t) {
        t && this.getLastRange().collapse().select();
      }
    }, {
      key: "restoreRange",
      value: function restoreRange() {
        this.lastRange && (this.lastRange.select(), this.focus());
      }
    }, {
      key: "saveTarget",
      value: function saveTarget(t) {
        this.$editable.data("target", t);
      }
    }, {
      key: "clearTarget",
      value: function clearTarget() {
        this.$editable.removeData("target");
      }
    }, {
      key: "restoreTarget",
      value: function restoreTarget() {
        return this.$editable.data("target");
      }
    }, {
      key: "currentStyle",
      value: function currentStyle() {
        var t = k.create();
        return t && (t = t.normalize()), t ? this.style.current(t) : this.style.fromNode(this.$editable);
      }
    }, {
      key: "styleFromNode",
      value: function styleFromNode(t) {
        return this.style.fromNode(t);
      }
    }, {
      key: "undo",
      value: function undo() {
        this.context.triggerEvent("before.command", this.$editable.html()), this.history.undo(), this.context.triggerEvent("change", this.$editable.html(), this.$editable);
      }
    }, {
      key: "commit",
      value: function commit() {
        this.context.triggerEvent("before.command", this.$editable.html()), this.history.commit(), this.context.triggerEvent("change", this.$editable.html(), this.$editable);
      }
    }, {
      key: "redo",
      value: function redo() {
        this.context.triggerEvent("before.command", this.$editable.html()), this.history.redo(), this.context.triggerEvent("change", this.$editable.html(), this.$editable);
      }
    }, {
      key: "beforeCommand",
      value: function beforeCommand() {
        this.context.triggerEvent("before.command", this.$editable.html()), document.execCommand("styleWithCSS", !1, this.options.styleWithCSS), this.focus();
      }
    }, {
      key: "afterCommand",
      value: function afterCommand(t) {
        this.normalizeContent(), this.history.recordUndo(), t || this.context.triggerEvent("change", this.$editable.html(), this.$editable);
      }
    }, {
      key: "tab",
      value: function tab() {
        var t = this.getLastRange();
        if (t.isCollapsed() && t.isOnCell()) this.table.tab(t);else {
          if (this.options.tabSize === 0) return !1;
          this.isLimited(this.options.tabSize) || (this.beforeCommand(), this.typing.insertTab(t, this.options.tabSize), this.afterCommand());
        }
      }
    }, {
      key: "untab",
      value: function untab() {
        var t = this.getLastRange();
        if (t.isCollapsed() && t.isOnCell()) this.table.tab(t, !0);else if (this.options.tabSize === 0) return !1;
      }
    }, {
      key: "wrapCommand",
      value: function wrapCommand(t) {
        return function () {
          this.beforeCommand(), t.apply(this, arguments), this.afterCommand();
        };
      }
    }, {
      key: "removed",
      value: function removed(t, e, o) {
        t = k.create(), t.isCollapsed() && t.isOnCell() && (e = t.ec, (o = e.tagName) && e.childElementCount === 1 && e.childNodes[0].tagName === "BR" && (o === "P" ? e.remove() : ["TH", "TD"].indexOf(o) >= 0 && e.firstChild.remove()));
      }
    }, {
      key: "insertImage",
      value: function insertImage(t, e) {
        var _this11 = this;
        return To(t).then(function (o) {
          _this11.beforeCommand(), typeof e == "function" ? e(o) : (typeof e == "string" && o.attr("data-filename", e), o.css("width", Math.min(_this11.$editable.width(), o.width()))), o.show(), _this11.getLastRange().insertNode(o[0]), _this11.setLastRange(k.createFromNodeAfter(o[0]).select()), _this11.afterCommand();
        }).fail(function (o) {
          _this11.context.triggerEvent("image.upload.error", o);
        });
      }
    }, {
      key: "insertImagesAsDataURL",
      value: function insertImagesAsDataURL(t) {
        var _this12 = this;
        $.each(t, function (e, o) {
          var n = o.name;
          _this12.options.maximumImageFileSize && _this12.options.maximumImageFileSize < o.size ? _this12.context.triggerEvent("image.upload.error", _this12.lang.image.maximumFileSizeError) : So(o).then(function (s) {
            return _this12.insertImage(s, n);
          }).fail(function () {
            _this12.context.triggerEvent("image.upload.error");
          });
        });
      }
    }, {
      key: "insertImagesOrCallback",
      value: function insertImagesOrCallback(t) {
        this.options.callbacks.onImageUpload ? this.context.triggerEvent("image.upload", t) : this.insertImagesAsDataURL(t);
      }
    }, {
      key: "getSelectedText",
      value: function getSelectedText() {
        var t = this.getLastRange();
        return t.isOnAnchor() && (t = k.createFromNode(r.ancestor(t.sc, r.isAnchor))), t.toString();
      }
    }, {
      key: "onFormatBlock",
      value: function onFormatBlock(t, e) {
        if (document.execCommand("FormatBlock", !1, S.isMSIE ? "<" + t + ">" : t), e && e.length && (e[0].tagName.toUpperCase() !== t.toUpperCase() && (e = e.find(t)), e && e.length)) {
          var o = this.createRange(),
            n = $([o.sc, o.ec]).closest(t);
          n.removeClass();
          var s = e[0].className || "";
          s && n.addClass(s);
        }
      }
    }, {
      key: "formatPara",
      value: function formatPara() {
        this.formatBlock("P");
      }
    }, {
      key: "fontStyling",
      value: function fontStyling(t, e) {
        var o = this.getLastRange();
        if (o !== "") {
          var n = this.style.styleNodes(o);
          if (this.$editor.find(".note-status-output").html(""), $(n).css(t, e), o.isCollapsed()) {
            var s = u.head(n);
            s && !r.nodeLength(s) && (s.innerHTML = r.ZERO_WIDTH_NBSP_CHAR, k.createFromNode(s.firstChild).select(), this.setLastRange(), this.$editable.data(Ao, s));
          } else o.select();
        } else {
          var _n3 = $.now();
          this.$editor.find(".note-status-output").html('<div id="note-status-output-' + _n3 + '" class="alert alert-info">' + this.lang.output.noSelection + "</div>"), setTimeout(function () {
            $("#note-status-output-" + _n3).remove();
          }, 5e3);
        }
      }
    }, {
      key: "unlink",
      value: function unlink() {
        var t = this.getLastRange();
        if (t.isOnAnchor()) {
          var e = r.ancestor(t.sc, r.isAnchor);
          t = k.createFromNode(e), t.select(), this.setLastRange(), this.beforeCommand(), document.execCommand("unlink"), this.afterCommand();
        }
      }
    }, {
      key: "getLinkInfo",
      value: function getLinkInfo() {
        this.hasFocus() || this.focus();
        var t = this.getLastRange().expand(r.isAnchor),
          e = $(u.head(t.nodes(r.isAnchor))),
          o = {
            range: t,
            text: t.toString(),
            url: e.length ? e.attr("href") : ""
          };
        return e.length && (o.isNewWindow = e.attr("target") === "_blank"), o;
      }
    }, {
      key: "addRow",
      value: function addRow(t) {
        var e = this.getLastRange(this.$editable);
        e.isCollapsed() && e.isOnCell() && (this.beforeCommand(), this.table.addRow(e, t), this.afterCommand());
      }
    }, {
      key: "addCol",
      value: function addCol(t) {
        var e = this.getLastRange(this.$editable);
        e.isCollapsed() && e.isOnCell() && (this.beforeCommand(), this.table.addCol(e, t), this.afterCommand());
      }
    }, {
      key: "deleteRow",
      value: function deleteRow() {
        var t = this.getLastRange(this.$editable);
        t.isCollapsed() && t.isOnCell() && (this.beforeCommand(), this.table.deleteRow(t), this.afterCommand());
      }
    }, {
      key: "deleteCol",
      value: function deleteCol() {
        var t = this.getLastRange(this.$editable);
        t.isCollapsed() && t.isOnCell() && (this.beforeCommand(), this.table.deleteCol(t), this.afterCommand());
      }
    }, {
      key: "deleteTable",
      value: function deleteTable() {
        var t = this.getLastRange(this.$editable);
        t.isCollapsed() && t.isOnCell() && (this.beforeCommand(), this.table.deleteTable(t), this.afterCommand());
      }
    }, {
      key: "resizeTo",
      value: function resizeTo(t, e, o) {
        var n;
        if (o) {
          var s = t.y / t.x,
            a = e.data("ratio");
          n = {
            width: a > s ? t.x : t.y / a,
            height: a > s ? t.x * a : t.y
          };
        } else n = {
          width: t.x,
          height: t.y
        };
        e.css(n);
      }
    }, {
      key: "hasFocus",
      value: function hasFocus() {
        return this.$editable.is(":focus");
      }
    }, {
      key: "focus",
      value: function focus() {
        this.hasFocus() || this.$editable.trigger("focus");
      }
    }, {
      key: "isEmpty",
      value: function isEmpty() {
        return r.isEmpty(this.$editable[0]) || r.emptyPara === this.$editable.html();
      }
    }, {
      key: "empty",
      value: function empty() {
        this.context.invoke("code", r.emptyPara);
      }
    }, {
      key: "normalizeContent",
      value: function normalizeContent() {
        this.$editable[0].normalize();
      }
    }]);
  }();
  var Do = /*#__PURE__*/function () {
    function Do(t) {
      _classCallCheck(this, Do);
      this.context = t, this.options = t.options, this.$editable = t.layoutInfo.editable;
    }
    return _createClass(Do, [{
      key: "initialize",
      value: function initialize() {
        this.$editable.on("paste", this.pasteByEvent.bind(this));
      }
    }, {
      key: "pasteByEvent",
      value: function pasteByEvent(t) {
        var _this13 = this;
        if (this.context.isDisabled()) return;
        var e = t.originalEvent.clipboardData;
        if (e && e.items && e.items.length) {
          var o = e.files,
            n = e.getData("Text");
          o.length > 0 && this.options.allowClipboardImagePasting && (this.context.invoke("editor.insertImagesOrCallback", o), t.preventDefault()), n.length > 0 && this.context.invoke("editor.isLimited", n.length) && t.preventDefault();
        } else if (window.clipboardData) {
          var _o4 = window.clipboardData.getData("text");
          this.context.invoke("editor.isLimited", _o4.length) && t.preventDefault();
        }
        setTimeout(function () {
          _this13.context.invoke("editor.afterCommand");
        }, 10);
      }
    }]);
  }();
  var Mo = /*#__PURE__*/function () {
    function Mo(t) {
      _classCallCheck(this, Mo);
      this.context = t, this.$eventListener = $(document), this.$editor = t.layoutInfo.editor, this.$editable = t.layoutInfo.editable, this.options = t.options, this.lang = this.options.langInfo, this.documentEventHandlers = {}, this.$dropzone = $(['<div class="note-dropzone">', '<div class="note-dropzone-message"></div>', "</div>"].join("")).prependTo(this.$editor);
    }
    return _createClass(Mo, [{
      key: "initialize",
      value: function initialize() {
        this.options.disableDragAndDrop ? (this.documentEventHandlers.onDrop = function (t) {
          t.preventDefault();
        }, this.$eventListener = this.$dropzone, this.$eventListener.on("drop", this.documentEventHandlers.onDrop)) : this.attachDragAndDropEvent();
      }
    }, {
      key: "attachDragAndDropEvent",
      value: function attachDragAndDropEvent() {
        var _this14 = this;
        var t = $();
        var e = this.$dropzone.find(".note-dropzone-message");
        this.documentEventHandlers.onDragenter = function (o) {
          var n = _this14.context.invoke("codeview.isActivated"),
            s = _this14.$editor.width() > 0 && _this14.$editor.height() > 0;
          !n && !t.length && s && (_this14.$editor.addClass("dragover"), _this14.$dropzone.width(_this14.$editor.width()), _this14.$dropzone.height(_this14.$editor.height()), e.text(_this14.lang.image.dragImageHere)), t = t.add(o.target);
        }, this.documentEventHandlers.onDragleave = function (o) {
          t = t.not(o.target), (!t.length || o.target.nodeName === "BODY") && (t = $(), _this14.$editor.removeClass("dragover"));
        }, this.documentEventHandlers.onDrop = function () {
          t = $(), _this14.$editor.removeClass("dragover");
        }, this.$eventListener.on("dragenter", this.documentEventHandlers.onDragenter).on("dragleave", this.documentEventHandlers.onDragleave).on("drop", this.documentEventHandlers.onDrop), this.$dropzone.on("dragenter", function () {
          _this14.$dropzone.addClass("hover"), e.text(_this14.lang.image.dropImage);
        }).on("dragleave", function () {
          _this14.$dropzone.removeClass("hover"), e.text(_this14.lang.image.dragImageHere);
        }), this.$dropzone.on("drop", function (o) {
          var n = o.originalEvent.dataTransfer;
          o.preventDefault(), n && n.files && n.files.length ? (_this14.$editable.trigger("focus"), _this14.context.invoke("editor.insertImagesOrCallback", n.files)) : $.each(n.types, function (s, a) {
            if (a.toLowerCase().indexOf("_moz_") > -1) return;
            var l = n.getData(a);
            a.toLowerCase().indexOf("text") > -1 ? _this14.context.invoke("editor.pasteHTML", l) : $(l).each(function (c, h) {
              _this14.context.invoke("editor.insertNode", h);
            });
          });
        }).on("dragover", !1);
      }
    }, {
      key: "destroy",
      value: function destroy() {
        var _this15 = this;
        Object.keys(this.documentEventHandlers).forEach(function (t) {
          _this15.$eventListener.off(t.slice(2).toLowerCase(), _this15.documentEventHandlers[t]);
        }), this.documentEventHandlers = {};
      }
    }]);
  }();
  var zo = /*#__PURE__*/function () {
    function zo(t) {
      _classCallCheck(this, zo);
      this.context = t, this.$editor = t.layoutInfo.editor, this.$editable = t.layoutInfo.editable, this.$codable = t.layoutInfo.codable, this.options = t.options, this.CodeMirrorConstructor = window.CodeMirror, this.options.codemirror.CodeMirrorConstructor && (this.CodeMirrorConstructor = this.options.codemirror.CodeMirrorConstructor);
    }
    return _createClass(zo, [{
      key: "sync",
      value: function sync(t) {
        var e = this.isActivated(),
          o = this.CodeMirrorConstructor;
        e && (t ? o ? this.$codable.data("cmEditor").getDoc().setValue(t) : this.$codable.val(t) : o && this.$codable.data("cmEditor").save());
      }
    }, {
      key: "initialize",
      value: function initialize() {
        var _this16 = this;
        this.$codable.on("keyup", function (t) {
          t.keyCode === w.code.ESCAPE && _this16.deactivate();
        });
      }
    }, {
      key: "isActivated",
      value: function isActivated() {
        return this.$editor.hasClass("codeview");
      }
    }, {
      key: "toggle",
      value: function toggle() {
        this.isActivated() ? this.deactivate() : this.activate(), this.context.triggerEvent("codeview.toggled");
      }
    }, {
      key: "purify",
      value: function purify(t) {
        if (this.options.codeviewFilter && (t = t.replace(this.options.codeviewFilterRegex, ""), this.options.codeviewIframeFilter)) {
          var e = this.options.codeviewIframeWhitelistSrc.concat(this.options.codeviewIframeWhitelistSrcBase);
          t = t.replace(/(<iframe.*?>.*?(?:<\/iframe>)?)/gi, function (o) {
            if (/<.+src(?==?('|"|\s)?)[\s\S]+src(?=('|"|\s)?)[^>]*?>/i.test(o)) return "";
            var _iterator = _createForOfIteratorHelper(e),
              _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var n = _step.value;
                if (new RegExp('src="(https?:)?//' + n.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&") + '/(.+)"').test(o)) return o;
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
            return "";
          });
        }
        return t;
      }
    }, {
      key: "activate",
      value: function activate() {
        var _this17 = this;
        var t = this.CodeMirrorConstructor;
        if (this.$codable.val(r.html(this.$editable, this.options.prettifyHtml)), this.$codable.height(this.$editable.height()), this.context.invoke("toolbar.updateCodeview", !0), this.context.invoke("airPopover.updateCodeview", !0), this.$editor.addClass("codeview"), this.$codable.trigger("focus"), t) {
          var e = t.fromTextArea(this.$codable[0], this.options.codemirror);
          if (this.options.codemirror.tern) {
            var o = new t.TernServer(this.options.codemirror.tern);
            e.ternServer = o, e.on("cursorActivity", function (n) {
              o.updateArgHints(n);
            });
          }
          e.on("blur", function (o) {
            _this17.context.triggerEvent("blur.codeview", e.getValue(), o);
          }), e.on("change", function () {
            _this17.context.triggerEvent("change.codeview", e.getValue(), e);
          }), e.setSize(null, this.$editable.outerHeight()), this.$codable.data("cmEditor", e);
        } else this.$codable.on("blur", function (e) {
          _this17.context.triggerEvent("blur.codeview", _this17.$codable.val(), e);
        }), this.$codable.on("input", function () {
          _this17.context.triggerEvent("change.codeview", _this17.$codable.val(), _this17.$codable);
        });
      }
    }, {
      key: "deactivate",
      value: function deactivate() {
        if (this.CodeMirrorConstructor) {
          var n = this.$codable.data("cmEditor");
          this.$codable.val(n.getValue()), n.toTextArea();
        }
        var e = this.purify(r.value(this.$codable, this.options.prettifyHtml) || r.emptyPara),
          o = this.$editable.html() !== e;
        this.$editable.html(e), this.$editable.height(this.options.height ? this.$codable.height() : "auto"), this.$editor.removeClass("codeview"), o && this.context.triggerEvent("change", this.$editable.html(), this.$editable), this.$editable.trigger("focus"), this.context.invoke("toolbar.updateCodeview", !1), this.context.invoke("airPopover.updateCodeview", !1);
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.isActivated() && this.deactivate();
      }
    }]);
  }();
  var te = 24;
  var Bo = /*#__PURE__*/function () {
    function Bo(t) {
      _classCallCheck(this, Bo);
      this.$document = $(document), this.$statusbar = t.layoutInfo.statusbar, this.$editable = t.layoutInfo.editable, this.$codable = t.layoutInfo.codable, this.options = t.options;
    }
    return _createClass(Bo, [{
      key: "initialize",
      value: function initialize() {
        var _this18 = this;
        if (this.options.airMode || this.options.disableResizeEditor) {
          this.destroy();
          return;
        }
        this.$statusbar.on("mousedown touchstart", function (t) {
          t.preventDefault(), t.stopPropagation();
          var e = _this18.$editable.offset().top - _this18.$document.scrollTop(),
            o = _this18.$codable.offset().top - _this18.$document.scrollTop(),
            n = function n(s) {
              var a = s.type == "mousemove" ? s : s.originalEvent.touches[0],
                l = a.clientY - (e + te),
                c = a.clientY - (o + te);
              l = _this18.options.minheight > 0 ? Math.max(l, _this18.options.minheight) : l, l = _this18.options.maxHeight > 0 ? Math.min(l, _this18.options.maxHeight) : l, c = _this18.options.minheight > 0 ? Math.max(c, _this18.options.minheight) : c, c = _this18.options.maxHeight > 0 ? Math.min(c, _this18.options.maxHeight) : c, _this18.$editable.height(l), _this18.$codable.height(c);
            };
          _this18.$document.on("mousemove touchmove", n).one("mouseup touchend", function () {
            _this18.$document.off("mousemove touchmove", n);
          });
        });
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.$statusbar.off(), this.$statusbar.addClass("locked");
      }
    }]);
  }();
  var Oo = /*#__PURE__*/function () {
    function Oo(t) {
      var _this19 = this;
      _classCallCheck(this, Oo);
      this.context = t, this.$editor = t.layoutInfo.editor, this.$toolbar = t.layoutInfo.toolbar, this.$editable = t.layoutInfo.editable, this.$codable = t.layoutInfo.codable, this.$window = $(window), this.$scrollbar = $("html, body"), this.scrollbarClassName = "note-fullscreen-body", this.onResize = function () {
        _this19.resizeTo({
          h: _this19.$window.height() - _this19.$toolbar.outerHeight()
        });
      };
    }
    return _createClass(Oo, [{
      key: "resizeTo",
      value: function resizeTo(t) {
        this.$editable.css("height", t.h), this.$codable.css("height", t.h), this.$codable.data("cmeditor") && this.$codable.data("cmeditor").setsize(null, t.h);
      }
    }, {
      key: "toggle",
      value: function toggle() {
        this.$editor.toggleClass("fullscreen");
        var t = this.isFullscreen();
        this.$scrollbar.toggleClass(this.scrollbarClassName, t), t ? (this.$editable.data("orgHeight", this.$editable.css("height")), this.$editable.data("orgMaxHeight", this.$editable.css("maxHeight")), this.$editable.css("maxHeight", ""), this.$window.on("resize", this.onResize).trigger("resize")) : (this.$window.off("resize", this.onResize), this.resizeTo({
          h: this.$editable.data("orgHeight")
        }), this.$editable.css("maxHeight", this.$editable.css("orgMaxHeight"))), this.context.invoke("toolbar.updateFullscreen", t);
      }
    }, {
      key: "isFullscreen",
      value: function isFullscreen() {
        return this.$editor.hasClass("fullscreen");
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.$scrollbar.removeClass(this.scrollbarClassName);
      }
    }]);
  }();
  var Uo = /*#__PURE__*/function () {
    function Uo(t) {
      var _this20 = this;
      _classCallCheck(this, Uo);
      this.context = t, this.$document = $(document), this.$editingArea = t.layoutInfo.editingArea, this.options = t.options, this.lang = this.options.langInfo, this.events = {
        "summernote.mousedown": function summernoteMousedown(e, o) {
          _this20.update(o.target, o) && o.preventDefault();
        },
        "summernote.keyup summernote.scroll summernote.change summernote.dialog.shown": function summernoteKeyup_summernoteScroll_summernoteChange_summernoteDialogShown() {
          _this20.update();
        },
        "summernote.disable summernote.blur": function summernoteDisable_summernoteBlur() {
          _this20.hide();
        },
        "summernote.codeview.toggled": function summernoteCodeviewToggled() {
          _this20.update();
        }
      };
    }
    return _createClass(Uo, [{
      key: "initialize",
      value: function initialize() {
        var _this21 = this;
        this.$handle = $(['<div class="note-handle">', '<div class="note-control-selection">', '<div class="note-control-selection-bg"></div>', '<div class="note-control-holder note-control-nw"></div>', '<div class="note-control-holder note-control-ne"></div>', '<div class="note-control-holder note-control-sw"></div>', '<div class="', this.options.disableResizeImage ? "note-control-holder" : "note-control-sizing", ' note-control-se"></div>', this.options.disableResizeImage ? "" : '<div class="note-control-selection-info"></div>', "</div>", "</div>"].join("")).prependTo(this.$editingArea), this.$handle.on("mousedown", function (t) {
          if (r.isControlSizing(t.target)) {
            t.preventDefault(), t.stopPropagation();
            var e = _this21.$handle.find(".note-control-selection").data("target"),
              o = e.offset(),
              n = _this21.$document.scrollTop(),
              s = function s(a) {
                _this21.context.invoke("editor.resizeTo", {
                  x: a.clientX - o.left,
                  y: a.clientY - (o.top - n)
                }, e, !a.shiftKey), _this21.update(e[0], a);
              };
            _this21.$document.on("mousemove", s).one("mouseup", function (a) {
              a.preventDefault(), _this21.$document.off("mousemove", s), _this21.context.invoke("editor.afterCommand");
            }), e.data("ratio") || e.data("ratio", e.height() / e.width());
          }
        }), this.$handle.on("wheel", function (t) {
          t.preventDefault(), _this21.update();
        });
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.$handle.remove();
      }
    }, {
      key: "update",
      value: function update(t, e) {
        if (this.context.isDisabled()) return !1;
        var o = r.isImg(t),
          n = this.$handle.find(".note-control-selection");
        if (this.context.invoke("imagePopover.update", t, e), o) {
          var s = $(t),
            a = this.$editingArea[0].getBoundingClientRect(),
            l = t.getBoundingClientRect();
          n.css({
            display: "block",
            left: l.left - a.left,
            top: l.top - a.top,
            width: l.width,
            height: l.height
          }).data("target", s);
          var c = new Image();
          c.src = s.attr("src");
          var h = l.width + "x" + l.height + " (" + this.lang.image.original + ": " + c.width + "x" + c.height + ")";
          n.find(".note-control-selection-info").text(h), this.context.invoke("editor.saveTarget", t);
        } else this.hide();
        return o;
      }
    }, {
      key: "hide",
      value: function hide() {
        this.context.invoke("editor.clearTarget"), this.$handle.children().hide();
      }
    }]);
  }();
  var jo = "http://",
    Wo = /^([A-Za-z][A-Za-z0-9+-.]*\:[\/]{2}|tel:|mailto:[A-Z0-9._%+-]+@|xmpp:[A-Z0-9._%+-]+@)?(www\.)?(.+)$/i;
  var Ko = /*#__PURE__*/function () {
    function Ko(t) {
      var _this22 = this;
      _classCallCheck(this, Ko);
      this.context = t, this.options = t.options, this.$editable = t.layoutInfo.editable, this.events = {
        "summernote.keyup": function summernoteKeyup(e, o) {
          o.isDefaultPrevented() || _this22.handleKeyup(o);
        },
        "summernote.keydown": function summernoteKeydown(e, o) {
          _this22.handleKeydown(o);
        }
      };
    }
    return _createClass(Ko, [{
      key: "initialize",
      value: function initialize() {
        this.lastWordRange = null;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.lastWordRange = null;
      }
    }, {
      key: "replace",
      value: function replace() {
        if (!this.lastWordRange) return;
        var t = this.lastWordRange.toString(),
          e = t.match(Wo);
        if (e && (e[1] || e[2])) {
          var o = e[1] ? t : jo + t,
            n = this.options.showDomainOnlyForAutolink ? t.replace(/^(?:https?:\/\/)?(?:tel?:?)?(?:mailto?:?)?(?:xmpp?:?)?(?:www\.)?/i, "").split("/")[0] : t,
            s = $("<a></a>").html(n).attr("href", o)[0];
          this.context.options.linkTargetBlank && $(s).attr("target", "_blank"), this.lastWordRange.insertNode(s), this.lastWordRange = null, this.context.invoke("editor.focus"), this.context.triggerEvent("change", this.$editable.html(), this.$editable);
        }
      }
    }, {
      key: "handleKeydown",
      value: function handleKeydown(t) {
        if (u.contains([w.code.ENTER, w.code.SPACE], t.keyCode)) {
          var e = this.context.invoke("editor.createRange").getWordRange();
          this.lastWordRange = e;
        }
      }
    }, {
      key: "handleKeyup",
      value: function handleKeyup(t) {
        (w.code.SPACE === t.keyCode || w.code.ENTER === t.keyCode && !t.shiftKey) && this.replace();
      }
    }]);
  }();
  var Vo = /*#__PURE__*/function () {
    function Vo(t) {
      var _this23 = this;
      _classCallCheck(this, Vo);
      this.$note = t.layoutInfo.note, this.events = {
        "summernote.change": function summernoteChange() {
          _this23.$note.val(t.invoke("code"));
        }
      };
    }
    return _createClass(Vo, [{
      key: "shouldInitialize",
      value: function shouldInitialize() {
        return r.isTextarea(this.$note[0]);
      }
    }]);
  }();
  var qo = /*#__PURE__*/function () {
    function qo(t) {
      var _this24 = this;
      _classCallCheck(this, qo);
      this.context = t, this.options = t.options.replace || {}, this.keys = [w.code.ENTER, w.code.SPACE, w.code.PERIOD, w.code.COMMA, w.code.SEMICOLON, w.code.SLASH], this.previousKeydownCode = null, this.events = {
        "summernote.keyup": function summernoteKeyup(e, o) {
          o.isDefaultPrevented() || _this24.handleKeyup(o);
        },
        "summernote.keydown": function summernoteKeydown(e, o) {
          _this24.handleKeydown(o);
        }
      };
    }
    return _createClass(qo, [{
      key: "shouldInitialize",
      value: function shouldInitialize() {
        return !!this.options.match;
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.lastWord = null;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.lastWord = null;
      }
    }, {
      key: "replace",
      value: function replace() {
        if (!this.lastWord) return;
        var t = this,
          e = this.lastWord.toString();
        this.options.match(e, function (o) {
          if (o) {
            var n = "";
            if (typeof o == "string" ? n = r.createText(o) : o instanceof jQuery ? n = o[0] : o instanceof Node && (n = o), !n) return;
            t.lastWord.insertNode(n), t.lastWord = null, t.context.invoke("editor.focus");
          }
        });
      }
    }, {
      key: "handleKeydown",
      value: function handleKeydown(t) {
        if (this.previousKeydownCode && u.contains(this.keys, this.previousKeydownCode)) {
          this.previousKeydownCode = t.keyCode;
          return;
        }
        if (u.contains(this.keys, t.keyCode)) {
          var e = this.context.invoke("editor.createRange").getWordRange();
          this.lastWord = e;
        }
        this.previousKeydownCode = t.keyCode;
      }
    }, {
      key: "handleKeyup",
      value: function handleKeyup(t) {
        u.contains(this.keys, t.keyCode) && this.replace();
      }
    }]);
  }();
  var _o = /*#__PURE__*/function () {
    function _o(t) {
      var _this25 = this;
      _classCallCheck(this, _o);
      this.context = t, this.$editingArea = t.layoutInfo.editingArea, this.options = t.options, this.options.inheritPlaceholder === !0 && (this.options.placeholder = this.context.$note.attr("placeholder") || this.options.placeholder), this.events = {
        "summernote.init summernote.change": function summernoteInit_summernoteChange() {
          _this25.update();
        },
        "summernote.codeview.toggled": function summernoteCodeviewToggled() {
          _this25.update();
        }
      };
    }
    return _createClass(_o, [{
      key: "shouldInitialize",
      value: function shouldInitialize() {
        return !!this.options.placeholder;
      }
    }, {
      key: "initialize",
      value: function initialize() {
        var _this26 = this;
        this.$placeholder = $('<div class="note-placeholder"></div>'), this.$placeholder.on("click", function () {
          _this26.context.invoke("focus");
        }).html(this.options.placeholder).prependTo(this.$editingArea), this.update();
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.$placeholder.remove();
      }
    }, {
      key: "update",
      value: function update() {
        var t = !this.context.invoke("codeview.isActivated") && this.context.invoke("editor.isEmpty");
        this.$placeholder.toggle(t);
      }
    }]);
  }();
  var Go = /*#__PURE__*/function () {
    function Go(t) {
      _classCallCheck(this, Go);
      this.ui = $.summernote.ui, this.context = t, this.$toolbar = t.layoutInfo.toolbar, this.options = t.options, this.lang = this.options.langInfo, this.invertedKeyMap = v.invertObject(this.options.keyMap[S.isMac ? "mac" : "pc"]);
    }
    return _createClass(Go, [{
      key: "representShortcut",
      value: function representShortcut(t) {
        var e = this.invertedKeyMap[t];
        return !this.options.shortcuts || !e ? "" : (S.isMac && (e = e.replace("CMD", "⌘").replace("SHIFT", "⇧")), e = e.replace("BACKSLASH", "\\").replace("SLASH", "/").replace("LEFTBRACKET", "[").replace("RIGHTBRACKET", "]"), " (" + e + ")");
      }
    }, {
      key: "button",
      value: function button(t) {
        return !this.options.tooltip && t.tooltip && delete t.tooltip, t.container = this.options.container, this.ui.button(t);
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.addToolbarButtons(), this.addImagePopoverButtons(), this.addLinkPopoverButtons(), this.addTablePopoverButtons(), this.fontInstalledMap = {};
      }
    }, {
      key: "destroy",
      value: function destroy() {
        delete this.fontInstalledMap;
      }
    }, {
      key: "isFontInstalled",
      value: function isFontInstalled(t) {
        return Object.prototype.hasOwnProperty.call(this.fontInstalledMap, t) || (this.fontInstalledMap[t] = S.isFontInstalled(t) || u.contains(this.options.fontNamesIgnoreCheck, t)), this.fontInstalledMap[t];
      }
    }, {
      key: "isFontDeservedToAdd",
      value: function isFontDeservedToAdd(t) {
        return t = t.toLowerCase(), t !== "" && this.isFontInstalled(t) && S.genericFontFamilies.indexOf(t) === -1;
      }
    }, {
      key: "colorPalette",
      value: function colorPalette(t, e, o, n) {
        var _this27 = this;
        return this.ui.buttonGroup({
          className: "note-color " + t,
          children: [this.button({
            className: "note-current-color-button",
            contents: this.ui.icon(this.options.icons.font + " note-recent-color"),
            tooltip: e,
            click: function click(s) {
              var a = $(s.currentTarget);
              o && n ? _this27.context.invoke("editor.color", {
                backColor: a.attr("data-backColor"),
                foreColor: a.attr("data-foreColor")
              }) : o ? _this27.context.invoke("editor.color", {
                backColor: a.attr("data-backColor")
              }) : n && _this27.context.invoke("editor.color", {
                foreColor: a.attr("data-foreColor")
              });
            },
            callback: function callback(s) {
              var a = s.find(".note-recent-color");
              o && (a.css("background-color", _this27.options.colorButton.backColor), s.attr("data-backColor", _this27.options.colorButton.backColor)), n ? (a.css("color", _this27.options.colorButton.foreColor), s.attr("data-foreColor", _this27.options.colorButton.foreColor)) : a.css("color", "transparent");
            }
          }), this.button({
            className: "dropdown-toggle",
            contents: this.ui.dropdownButtonContents("", this.options),
            tooltip: this.lang.color.more,
            data: {
              toggle: "dropdown"
            }
          }), this.ui.dropdown({
            items: (o ? ['<div class="note-palette">', '<div class="note-palette-title">' + this.lang.color.background + "</div>", "<div>", '<button type="button" class="note-color-reset btn btn-light btn-default" data-event="backColor" data-value="transparent">', this.lang.color.transparent, "</button>", "</div>", '<div class="note-holder" data-event="backColor"><!-- back colors --></div>', "<div>", '<button type="button" class="note-color-select btn btn-light btn-default" data-event="openPalette" data-value="backColorPicker-' + this.options.id + '">', this.lang.color.cpSelect, "</button>", '<input type="color" id="backColorPicker-' + this.options.id + '" class="note-btn note-color-select-btn" value="' + this.options.colorButton.backColor + '" data-event="backColorPalette-' + this.options.id + '">', "</div>", '<div class="note-holder-custom" id="backColorPalette-' + this.options.id + '" data-event="backColor"></div>', "</div>"].join("") : "") + (n ? ['<div class="note-palette">', '<div class="note-palette-title">' + this.lang.color.foreground + "</div>", "<div>", '<button type="button" class="note-color-reset btn btn-light btn-default" data-event="removeFormat" data-value="foreColor">', this.lang.color.resetToDefault, "</button>", "</div>", '<div class="note-holder" data-event="foreColor"><!-- fore colors --></div>', "<div>", '<button type="button" class="note-color-select btn btn-light btn-default" data-event="openPalette" data-value="foreColorPicker-' + this.options.id + '">', this.lang.color.cpSelect, "</button>", '<input type="color" id="foreColorPicker-' + this.options.id + '" class="note-btn note-color-select-btn" value="' + this.options.colorButton.foreColor + '" data-event="foreColorPalette-' + this.options.id + '">', "</div>", '<div class="note-holder-custom" id="foreColorPalette-' + this.options.id + '" data-event="foreColor"></div>', "</div>"].join("") : ""),
            callback: function callback(s) {
              s.find(".note-holder").each(function (l, c) {
                var h = $(c);
                h.append(_this27.ui.palette({
                  colors: _this27.options.colors,
                  colorsName: _this27.options.colorsName,
                  eventName: h.data("event"),
                  container: _this27.options.container,
                  tooltip: _this27.options.tooltip
                }).render());
              });
              var a = [["#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]];
              s.find(".note-holder-custom").each(function (l, c) {
                var h = $(c);
                h.append(_this27.ui.palette({
                  colors: a,
                  colorsName: a,
                  eventName: h.data("event"),
                  container: _this27.options.container,
                  tooltip: _this27.options.tooltip
                }).render());
              }), s.find("input[type=color]").each(function (l, c) {
                $(c).on("change", function () {
                  var h = s.find("#" + $(this).data("event")).find(".note-color-btn").first(),
                    d = this.value.toUpperCase();
                  h.css("background-color", d).attr("aria-label", d).attr("data-value", d).attr("data-original-title", d), h.trigger("click");
                });
              });
            },
            click: function click(s) {
              s.stopPropagation();
              var a = $("." + t).find(".note-dropdown-menu"),
                l = $(s.target),
                c = l.data("event"),
                h = l.attr("data-value");
              if (c === "openPalette") {
                var d = a.find("#" + h),
                  f = $(a.find("#" + d.data("event")).find(".note-color-row")[0]),
                  C = f.find(".note-color-btn").last().detach(),
                  b = d.val();
                C.css("background-color", b).attr("aria-label", b).attr("data-value", b).attr("data-original-title", b), f.prepend(C), d.trigger("click");
              } else {
                if (u.contains(["backColor", "foreColor"], c)) {
                  var _d3 = c === "backColor" ? "background-color" : "color",
                    _f = l.closest(".note-color").find(".note-recent-color"),
                    _C = l.closest(".note-color").find(".note-current-color-button");
                  _f.css(_d3, h), _C.attr("data-" + c, h);
                }
                _this27.context.invoke("editor." + c, h);
              }
            }
          })]
        }).render();
      }
    }, {
      key: "addToolbarButtons",
      value: function addToolbarButtons() {
        var _this28 = this;
        this.context.memo("button.style", function () {
          return _this28.ui.buttonGroup([_this28.button({
            className: "dropdown-toggle",
            contents: _this28.ui.dropdownButtonContents(_this28.ui.icon(_this28.options.icons.magic), _this28.options),
            tooltip: _this28.lang.style.style,
            data: {
              toggle: "dropdown"
            }
          }), _this28.ui.dropdown({
            className: "dropdown-style",
            items: _this28.options.styleTags,
            title: _this28.lang.style.style,
            template: function template(l) {
              typeof l == "string" && (l = {
                tag: l,
                title: Object.prototype.hasOwnProperty.call(_this28.lang.style, l) ? _this28.lang.style[l] : l
              });
              var c = l.tag,
                h = l.title,
                d = l.style ? ' style="' + l.style + '" ' : "",
                f = l.className ? ' class="' + l.className + '"' : "";
              return "<" + c + d + f + ">" + h + "</" + c + ">";
            },
            click: _this28.context.createInvokeHandler("editor.formatBlock")
          })]).render();
        });
        var _loop = function _loop() {
          var h = _this28.options.styleTags[l];
          _this28.context.memo("button.style." + h, function () {
            return _this28.button({
              className: "note-btn-style-" + h,
              contents: '<div data-value="' + h + '">' + h.toUpperCase() + "</div>",
              tooltip: _this28.lang.style[h],
              click: _this28.context.createInvokeHandler("editor.formatBlock")
            }).render();
          });
        };
        for (var l = 0, c = this.options.styleTags.length; l < c; l++) {
          _loop();
        }
        this.context.memo("button.bold", function () {
          return _this28.button({
            className: "note-btn-bold",
            contents: _this28.ui.icon(_this28.options.icons.bold),
            tooltip: _this28.lang.font.bold + _this28.representShortcut("bold"),
            click: _this28.context.createInvokeHandlerAndUpdateState("editor.bold")
          }).render();
        }), this.context.memo("button.italic", function () {
          return _this28.button({
            className: "note-btn-italic",
            contents: _this28.ui.icon(_this28.options.icons.italic),
            tooltip: _this28.lang.font.italic + _this28.representShortcut("italic"),
            click: _this28.context.createInvokeHandlerAndUpdateState("editor.italic")
          }).render();
        }), this.context.memo("button.underline", function () {
          return _this28.button({
            className: "note-btn-underline",
            contents: _this28.ui.icon(_this28.options.icons.underline),
            tooltip: _this28.lang.font.underline + _this28.representShortcut("underline"),
            click: _this28.context.createInvokeHandlerAndUpdateState("editor.underline")
          }).render();
        }), this.context.memo("button.clear", function () {
          return _this28.button({
            contents: _this28.ui.icon(_this28.options.icons.eraser),
            tooltip: _this28.lang.font.clear + _this28.representShortcut("removeFormat"),
            click: _this28.context.createInvokeHandler("editor.removeFormat")
          }).render();
        }), this.context.memo("button.strikethrough", function () {
          return _this28.button({
            className: "note-btn-strikethrough",
            contents: _this28.ui.icon(_this28.options.icons.strikethrough),
            tooltip: _this28.lang.font.strikethrough + _this28.representShortcut("strikethrough"),
            click: _this28.context.createInvokeHandlerAndUpdateState("editor.strikethrough")
          }).render();
        }), this.context.memo("button.superscript", function () {
          return _this28.button({
            className: "note-btn-superscript",
            contents: _this28.ui.icon(_this28.options.icons.superscript),
            tooltip: _this28.lang.font.superscript,
            click: _this28.context.createInvokeHandlerAndUpdateState("editor.superscript")
          }).render();
        }), this.context.memo("button.subscript", function () {
          return _this28.button({
            className: "note-btn-subscript",
            contents: _this28.ui.icon(_this28.options.icons.subscript),
            tooltip: _this28.lang.font.subscript,
            click: _this28.context.createInvokeHandlerAndUpdateState("editor.subscript")
          }).render();
        }), this.context.memo("button.fontname", function () {
          var l = _this28.context.invoke("editor.currentStyle");
          return _this28.options.addDefaultFonts && $.each(l["font-family"].split(","), function (c, h) {
            h = h.trim().replace(/['"]+/g, ""), _this28.isFontDeservedToAdd(h) && _this28.options.fontNames.indexOf(h) === -1 && _this28.options.fontNames.push(h);
          }), _this28.ui.buttonGroup([_this28.button({
            className: "dropdown-toggle",
            contents: _this28.ui.dropdownButtonContents('<span class="note-current-fontname"></span>', _this28.options),
            tooltip: _this28.lang.font.name,
            data: {
              toggle: "dropdown"
            }
          }), _this28.ui.dropdownCheck({
            className: "dropdown-fontname",
            checkClassName: _this28.options.icons.menuCheck,
            items: _this28.options.fontNames.filter(_this28.isFontInstalled.bind(_this28)),
            title: _this28.lang.font.name,
            template: function template(c) {
              return '<span style="font-family: ' + S.validFontName(c) + '">' + c + "</span>";
            },
            click: _this28.context.createInvokeHandlerAndUpdateState("editor.fontName")
          })]).render();
        }), this.context.memo("button.fontsize", function () {
          return _this28.ui.buttonGroup([_this28.button({
            className: "dropdown-toggle",
            contents: _this28.ui.dropdownButtonContents('<span class="note-current-fontsize"></span>', _this28.options),
            tooltip: _this28.lang.font.size,
            data: {
              toggle: "dropdown"
            }
          }), _this28.ui.dropdownCheck({
            className: "dropdown-fontsize",
            checkClassName: _this28.options.icons.menuCheck,
            items: _this28.options.fontSizes,
            title: _this28.lang.font.size,
            click: _this28.context.createInvokeHandlerAndUpdateState("editor.fontSize")
          })]).render();
        }), this.context.memo("button.fontsizeunit", function () {
          return _this28.ui.buttonGroup([_this28.button({
            className: "dropdown-toggle",
            contents: _this28.ui.dropdownButtonContents('<span class="note-current-fontsizeunit"></span>', _this28.options),
            tooltip: _this28.lang.font.sizeunit,
            data: {
              toggle: "dropdown"
            }
          }), _this28.ui.dropdownCheck({
            className: "dropdown-fontsizeunit",
            checkClassName: _this28.options.icons.menuCheck,
            items: _this28.options.fontSizeUnits,
            title: _this28.lang.font.sizeunit,
            click: _this28.context.createInvokeHandlerAndUpdateState("editor.fontSizeUnit")
          })]).render();
        }), this.context.memo("button.color", function () {
          return _this28.colorPalette("note-color-all", _this28.lang.color.recent, !0, !0);
        }), this.context.memo("button.forecolor", function () {
          return _this28.colorPalette("note-color-fore", _this28.lang.color.foreground, !1, !0);
        }), this.context.memo("button.backcolor", function () {
          return _this28.colorPalette("note-color-back", _this28.lang.color.background, !0, !1);
        }), this.context.memo("button.ul", function () {
          return _this28.button({
            contents: _this28.ui.icon(_this28.options.icons.unorderedlist),
            tooltip: _this28.lang.lists.unordered + _this28.representShortcut("insertUnorderedList"),
            click: _this28.context.createInvokeHandler("editor.insertUnorderedList")
          }).render();
        }), this.context.memo("button.ol", function () {
          return _this28.button({
            contents: _this28.ui.icon(_this28.options.icons.orderedlist),
            tooltip: _this28.lang.lists.ordered + _this28.representShortcut("insertOrderedList"),
            click: _this28.context.createInvokeHandler("editor.insertOrderedList")
          }).render();
        });
        var t = this.button({
            contents: this.ui.icon(this.options.icons.alignLeft),
            tooltip: this.lang.paragraph.left + this.representShortcut("justifyLeft"),
            click: this.context.createInvokeHandler("editor.justifyLeft")
          }),
          e = this.button({
            contents: this.ui.icon(this.options.icons.alignCenter),
            tooltip: this.lang.paragraph.center + this.representShortcut("justifyCenter"),
            click: this.context.createInvokeHandler("editor.justifyCenter")
          }),
          o = this.button({
            contents: this.ui.icon(this.options.icons.alignRight),
            tooltip: this.lang.paragraph.right + this.representShortcut("justifyRight"),
            click: this.context.createInvokeHandler("editor.justifyRight")
          }),
          n = this.button({
            contents: this.ui.icon(this.options.icons.alignJustify),
            tooltip: this.lang.paragraph.justify + this.representShortcut("justifyFull"),
            click: this.context.createInvokeHandler("editor.justifyFull")
          }),
          s = this.button({
            contents: this.ui.icon(this.options.icons.outdent),
            tooltip: this.lang.paragraph.outdent + this.representShortcut("outdent"),
            click: this.context.createInvokeHandler("editor.outdent")
          }),
          a = this.button({
            contents: this.ui.icon(this.options.icons.indent),
            tooltip: this.lang.paragraph.indent + this.representShortcut("indent"),
            click: this.context.createInvokeHandler("editor.indent")
          });
        this.context.memo("button.justifyLeft", v.invoke(t, "render")), this.context.memo("button.justifyCenter", v.invoke(e, "render")), this.context.memo("button.justifyRight", v.invoke(o, "render")), this.context.memo("button.justifyFull", v.invoke(n, "render")), this.context.memo("button.outdent", v.invoke(s, "render")), this.context.memo("button.indent", v.invoke(a, "render")), this.context.memo("button.paragraph", function () {
          return _this28.ui.buttonGroup([_this28.button({
            className: "dropdown-toggle",
            contents: _this28.ui.dropdownButtonContents(_this28.ui.icon(_this28.options.icons.alignLeft), _this28.options),
            tooltip: _this28.lang.paragraph.paragraph,
            data: {
              toggle: "dropdown"
            }
          }), _this28.ui.dropdown([_this28.ui.buttonGroup({
            className: "note-align",
            children: [t, e, o, n]
          }), _this28.ui.buttonGroup({
            className: "note-list",
            children: [s, a]
          })])]).render();
        }), this.context.memo("button.height", function () {
          return _this28.ui.buttonGroup([_this28.button({
            className: "dropdown-toggle",
            contents: _this28.ui.dropdownButtonContents(_this28.ui.icon(_this28.options.icons.textHeight), _this28.options),
            tooltip: _this28.lang.font.height,
            data: {
              toggle: "dropdown"
            }
          }), _this28.ui.dropdownCheck({
            items: _this28.options.lineHeights,
            checkClassName: _this28.options.icons.menuCheck,
            className: "dropdown-line-height",
            title: _this28.lang.font.height,
            click: _this28.context.createInvokeHandler("editor.lineHeight")
          })]).render();
        }), this.context.memo("button.table", function () {
          return _this28.ui.buttonGroup([_this28.button({
            className: "dropdown-toggle",
            contents: _this28.ui.dropdownButtonContents(_this28.ui.icon(_this28.options.icons.table), _this28.options),
            tooltip: _this28.lang.table.table,
            data: {
              toggle: "dropdown"
            }
          }), _this28.ui.dropdown({
            title: _this28.lang.table.table,
            className: "note-table",
            items: ['<div class="note-dimension-picker">', '<div class="note-dimension-picker-mousecatcher" data-event="insertTable" data-value="1x1"></div>', '<div class="note-dimension-picker-highlighted"></div>', '<div class="note-dimension-picker-unhighlighted"></div>', "</div>", '<div class="note-dimension-display">1 x 1</div>'].join("")
          })], {
            callback: function callback(l) {
              l.find(".note-dimension-picker-mousecatcher").css({
                width: _this28.options.insertTableMaxSize.col + "em",
                height: _this28.options.insertTableMaxSize.row + "em"
              }).on("mousedown", _this28.context.createInvokeHandler("editor.insertTable")).on("mousemove", _this28.tableMoveHandler.bind(_this28));
            }
          }).render();
        }), this.context.memo("button.link", function () {
          return _this28.button({
            contents: _this28.ui.icon(_this28.options.icons.link),
            tooltip: _this28.lang.link.link + _this28.representShortcut("linkDialog.show"),
            click: _this28.context.createInvokeHandler("linkDialog.show")
          }).render();
        }), this.context.memo("button.picture", function () {
          return _this28.button({
            contents: _this28.ui.icon(_this28.options.icons.picture),
            tooltip: _this28.lang.image.image,
            click: _this28.context.createInvokeHandler("imageDialog.show")
          }).render();
        }), this.context.memo("button.video", function () {
          return _this28.button({
            contents: _this28.ui.icon(_this28.options.icons.video),
            tooltip: _this28.lang.video.video,
            click: _this28.context.createInvokeHandler("videoDialog.show")
          }).render();
        }), this.context.memo("button.hr", function () {
          return _this28.button({
            contents: _this28.ui.icon(_this28.options.icons.minus),
            tooltip: _this28.lang.hr.insert + _this28.representShortcut("insertHorizontalRule"),
            click: _this28.context.createInvokeHandler("editor.insertHorizontalRule")
          }).render();
        }), this.context.memo("button.fullscreen", function () {
          return _this28.button({
            className: "btn-fullscreen note-codeview-keep",
            contents: _this28.ui.icon(_this28.options.icons.arrowsAlt),
            tooltip: _this28.lang.options.fullscreen,
            click: _this28.context.createInvokeHandler("fullscreen.toggle")
          }).render();
        }), this.context.memo("button.codeview", function () {
          return _this28.button({
            className: "btn-codeview note-codeview-keep",
            contents: _this28.ui.icon(_this28.options.icons.code),
            tooltip: _this28.lang.options.codeview,
            click: _this28.context.createInvokeHandler("codeview.toggle")
          }).render();
        }), this.context.memo("button.redo", function () {
          return _this28.button({
            contents: _this28.ui.icon(_this28.options.icons.redo),
            tooltip: _this28.lang.history.redo + _this28.representShortcut("redo"),
            click: _this28.context.createInvokeHandler("editor.redo")
          }).render();
        }), this.context.memo("button.undo", function () {
          return _this28.button({
            contents: _this28.ui.icon(_this28.options.icons.undo),
            tooltip: _this28.lang.history.undo + _this28.representShortcut("undo"),
            click: _this28.context.createInvokeHandler("editor.undo")
          }).render();
        }), this.context.memo("button.help", function () {
          return _this28.button({
            contents: _this28.ui.icon(_this28.options.icons.question),
            tooltip: _this28.lang.options.help,
            click: _this28.context.createInvokeHandler("helpDialog.show")
          }).render();
        });
      }
    }, {
      key: "addImagePopoverButtons",
      value: function addImagePopoverButtons() {
        var _this29 = this;
        this.context.memo("button.resizeFull", function () {
          return _this29.button({
            contents: '<span class="note-fontsize-10">100%</span>',
            tooltip: _this29.lang.image.resizeFull,
            click: _this29.context.createInvokeHandler("editor.resize", "1")
          }).render();
        }), this.context.memo("button.resizeHalf", function () {
          return _this29.button({
            contents: '<span class="note-fontsize-10">50%</span>',
            tooltip: _this29.lang.image.resizeHalf,
            click: _this29.context.createInvokeHandler("editor.resize", "0.5")
          }).render();
        }), this.context.memo("button.resizeQuarter", function () {
          return _this29.button({
            contents: '<span class="note-fontsize-10">25%</span>',
            tooltip: _this29.lang.image.resizeQuarter,
            click: _this29.context.createInvokeHandler("editor.resize", "0.25")
          }).render();
        }), this.context.memo("button.resizeNone", function () {
          return _this29.button({
            contents: _this29.ui.icon(_this29.options.icons.rollback),
            tooltip: _this29.lang.image.resizeNone,
            click: _this29.context.createInvokeHandler("editor.resize", "0")
          }).render();
        }), this.context.memo("button.floatLeft", function () {
          return _this29.button({
            contents: _this29.ui.icon(_this29.options.icons.floatLeft),
            tooltip: _this29.lang.image.floatLeft,
            click: _this29.context.createInvokeHandler("editor.floatMe", "left")
          }).render();
        }), this.context.memo("button.floatRight", function () {
          return _this29.button({
            contents: _this29.ui.icon(_this29.options.icons.floatRight),
            tooltip: _this29.lang.image.floatRight,
            click: _this29.context.createInvokeHandler("editor.floatMe", "right")
          }).render();
        }), this.context.memo("button.floatNone", function () {
          return _this29.button({
            contents: _this29.ui.icon(_this29.options.icons.rollback),
            tooltip: _this29.lang.image.floatNone,
            click: _this29.context.createInvokeHandler("editor.floatMe", "none")
          }).render();
        }), this.context.memo("button.removeMedia", function () {
          return _this29.button({
            contents: _this29.ui.icon(_this29.options.icons.trash),
            tooltip: _this29.lang.image.remove,
            click: _this29.context.createInvokeHandler("editor.removeMedia")
          }).render();
        });
      }
    }, {
      key: "addLinkPopoverButtons",
      value: function addLinkPopoverButtons() {
        var _this30 = this;
        this.context.memo("button.linkDialogShow", function () {
          return _this30.button({
            contents: _this30.ui.icon(_this30.options.icons.link),
            tooltip: _this30.lang.link.edit,
            click: _this30.context.createInvokeHandler("linkDialog.show")
          }).render();
        }), this.context.memo("button.unlink", function () {
          return _this30.button({
            contents: _this30.ui.icon(_this30.options.icons.unlink),
            tooltip: _this30.lang.link.unlink,
            click: _this30.context.createInvokeHandler("editor.unlink")
          }).render();
        });
      }
    }, {
      key: "addTablePopoverButtons",
      value: function addTablePopoverButtons() {
        var _this31 = this;
        this.context.memo("button.addRowUp", function () {
          return _this31.button({
            className: "btn-md",
            contents: _this31.ui.icon(_this31.options.icons.rowAbove),
            tooltip: _this31.lang.table.addRowAbove,
            click: _this31.context.createInvokeHandler("editor.addRow", "top")
          }).render();
        }), this.context.memo("button.addRowDown", function () {
          return _this31.button({
            className: "btn-md",
            contents: _this31.ui.icon(_this31.options.icons.rowBelow),
            tooltip: _this31.lang.table.addRowBelow,
            click: _this31.context.createInvokeHandler("editor.addRow", "bottom")
          }).render();
        }), this.context.memo("button.addColLeft", function () {
          return _this31.button({
            className: "btn-md",
            contents: _this31.ui.icon(_this31.options.icons.colBefore),
            tooltip: _this31.lang.table.addColLeft,
            click: _this31.context.createInvokeHandler("editor.addCol", "left")
          }).render();
        }), this.context.memo("button.addColRight", function () {
          return _this31.button({
            className: "btn-md",
            contents: _this31.ui.icon(_this31.options.icons.colAfter),
            tooltip: _this31.lang.table.addColRight,
            click: _this31.context.createInvokeHandler("editor.addCol", "right")
          }).render();
        }), this.context.memo("button.deleteRow", function () {
          return _this31.button({
            className: "btn-md",
            contents: _this31.ui.icon(_this31.options.icons.rowRemove),
            tooltip: _this31.lang.table.delRow,
            click: _this31.context.createInvokeHandler("editor.deleteRow")
          }).render();
        }), this.context.memo("button.deleteCol", function () {
          return _this31.button({
            className: "btn-md",
            contents: _this31.ui.icon(_this31.options.icons.colRemove),
            tooltip: _this31.lang.table.delCol,
            click: _this31.context.createInvokeHandler("editor.deleteCol")
          }).render();
        }), this.context.memo("button.deleteTable", function () {
          return _this31.button({
            className: "btn-md",
            contents: _this31.ui.icon(_this31.options.icons.trash),
            tooltip: _this31.lang.table.delTable,
            click: _this31.context.createInvokeHandler("editor.deleteTable")
          }).render();
        });
      }
    }, {
      key: "build",
      value: function build(t, e) {
        for (var o = 0, n = e.length; o < n; o++) {
          var s = e[o],
            a = Array.isArray(s) ? s[0] : s,
            l = Array.isArray(s) ? s.length === 1 ? [s[0]] : s[1] : [s],
            c = this.ui.buttonGroup({
              className: "note-" + a
            }).render();
          for (var h = 0, d = l.length; h < d; h++) {
            var f = this.context.memo("button." + l[h]);
            f && c.append(typeof f == "function" ? f(this.context) : f);
          }
          c.appendTo(t);
        }
      }
    }, {
      key: "updateCurrentStyle",
      value: function updateCurrentStyle(t) {
        var e = t || this.$toolbar,
          o = this.context.invoke("editor.currentStyle");
        if (this.updateBtnStates(e, {
          ".note-btn-bold": function noteBtnBold() {
            return o["font-bold"] === "bold";
          },
          ".note-btn-italic": function noteBtnItalic() {
            return o["font-italic"] === "italic";
          },
          ".note-btn-underline": function noteBtnUnderline() {
            return o["font-underline"] === "underline";
          },
          ".note-btn-subscript": function noteBtnSubscript() {
            return o["font-subscript"] === "subscript";
          },
          ".note-btn-superscript": function noteBtnSuperscript() {
            return o["font-superscript"] === "superscript";
          },
          ".note-btn-strikethrough": function noteBtnStrikethrough() {
            return o["font-strikethrough"] === "strikethrough";
          }
        }), o["font-family"]) {
          var n = o["font-family"].split(",").map(function (a) {
              return a.replace(/[\'\"]/g, "").replace(/\s+$/, "").replace(/^\s+/, "");
            }),
            s = u.find(n, this.isFontInstalled.bind(this));
          e.find(".dropdown-fontname a").each(function (a, l) {
            var c = $(l),
              h = c.data("value") + "" == s + "";
            c.toggleClass("checked", h);
          }), e.find(".note-current-fontname").text(s).css("font-family", s);
        }
        if (o["font-size"]) {
          var _n4 = o["font-size"];
          e.find(".dropdown-fontsize a").each(function (a, l) {
            var c = $(l),
              h = c.data("value") + "" == _n4 + "";
            c.toggleClass("checked", h);
          }), e.find(".note-current-fontsize").text(_n4);
          var _s4 = o["font-size-unit"];
          e.find(".dropdown-fontsizeunit a").each(function (a, l) {
            var c = $(l),
              h = c.data("value") + "" == _s4 + "";
            c.toggleClass("checked", h);
          }), e.find(".note-current-fontsizeunit").text(_s4);
        }
        if (o["line-height"]) {
          var _n5 = o["line-height"];
          e.find(".dropdown-line-height a").each(function (s, a) {
            var l = $(a),
              c = $(a).data("value") + "" == _n5 + "";
            l.toggleClass("checked", c);
          }), e.find(".note-current-line-height").text(_n5);
        }
      }
    }, {
      key: "updateBtnStates",
      value: function updateBtnStates(t, e) {
        var _this32 = this;
        $.each(e, function (o, n) {
          _this32.ui.toggleBtnActive(t.find(o), n());
        });
      }
    }, {
      key: "tableMoveHandler",
      value: function tableMoveHandler(t) {
        var o = $(t.target.parentNode),
          n = o.next(),
          s = o.find(".note-dimension-picker-mousecatcher"),
          a = o.find(".note-dimension-picker-highlighted"),
          l = o.find(".note-dimension-picker-unhighlighted");
        var c;
        if (t.offsetX === void 0) {
          var d = $(t.target).offset();
          c = {
            x: t.pageX - d.left,
            y: t.pageY - d.top
          };
        } else c = {
          x: t.offsetX,
          y: t.offsetY
        };
        var h = {
          c: Math.ceil(c.x / 18) || 1,
          r: Math.ceil(c.y / 18) || 1
        };
        a.css({
          width: h.c + "em",
          height: h.r + "em"
        }), s.data("value", h.c + "x" + h.r), h.c > 3 && h.c < this.options.insertTableMaxSize.col && l.css({
          width: h.c + 1 + "em"
        }), h.r > 3 && h.r < this.options.insertTableMaxSize.row && l.css({
          height: h.r + 1 + "em"
        }), n.html(h.c + " x " + h.r);
      }
    }]);
  }();
  var Zo = /*#__PURE__*/function () {
    function Zo(t) {
      _classCallCheck(this, Zo);
      this.context = t, this.$window = $(window), this.$document = $(document), this.ui = $.summernote.ui, this.$note = t.layoutInfo.note, this.$editor = t.layoutInfo.editor, this.$toolbar = t.layoutInfo.toolbar, this.$editable = t.layoutInfo.editable, this.$statusbar = t.layoutInfo.statusbar, this.options = t.options, this.isFollowing = !1, this.followScroll = this.followScroll.bind(this);
    }
    return _createClass(Zo, [{
      key: "shouldInitialize",
      value: function shouldInitialize() {
        return !this.options.airMode;
      }
    }, {
      key: "initialize",
      value: function initialize() {
        var _this33 = this;
        this.options.toolbar = this.options.toolbar || [], this.options.toolbar.length ? this.context.invoke("buttons.build", this.$toolbar, this.options.toolbar) : this.$toolbar.hide(), this.options.toolbarContainer && this.$toolbar.appendTo(this.options.toolbarContainer), this.changeContainer(!1), this.$note.on("summernote.keyup summernote.mouseup summernote.change", function () {
          _this33.context.invoke("buttons.updateCurrentStyle");
        }), this.context.invoke("buttons.updateCurrentStyle"), this.options.followingToolbar && this.$window.on("scroll resize", this.followScroll);
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.$toolbar.children().remove(), this.options.followingToolbar && this.$window.off("scroll resize", this.followScroll);
      }
    }, {
      key: "followScroll",
      value: function followScroll() {
        if (this.$editor.hasClass("fullscreen")) return !1;
        var t = this.$editor.outerHeight(),
          e = this.$editor.width(),
          o = this.$toolbar.height(),
          n = this.$statusbar.height();
        var s = 0;
        this.options.otherStaticBar && (s = $(this.options.otherStaticBar).outerHeight());
        var a = this.$document.scrollTop(),
          l = this.$editor.offset().top,
          c = l + t,
          h = l - s,
          d = c - s - o - n;
        !this.isFollowing && a > h && a < d - o ? (this.isFollowing = !0, this.$editable.css({
          marginTop: this.$toolbar.outerHeight()
        }), this.$toolbar.css({
          position: "fixed",
          top: s,
          width: e,
          zIndex: 1e3
        })) : this.isFollowing && (a < h || a > d) && (this.isFollowing = !1, this.$toolbar.css({
          position: "relative",
          top: 0,
          width: "100%",
          zIndex: "auto"
        }), this.$editable.css({
          marginTop: ""
        }));
      }
    }, {
      key: "changeContainer",
      value: function changeContainer(t) {
        t ? this.$toolbar.prependTo(this.$editor) : this.options.toolbarContainer && this.$toolbar.appendTo(this.options.toolbarContainer), this.options.followingToolbar && this.followScroll();
      }
    }, {
      key: "updateFullscreen",
      value: function updateFullscreen(t) {
        this.ui.toggleBtnActive(this.$toolbar.find(".btn-fullscreen"), t), this.changeContainer(t);
      }
    }, {
      key: "updateCodeview",
      value: function updateCodeview(t) {
        this.ui.toggleBtnActive(this.$toolbar.find(".btn-codeview"), t), t ? this.deactivate() : this.activate();
      }
    }, {
      key: "activate",
      value: function activate(t) {
        var e = this.$toolbar.find("button");
        t || (e = e.not(".note-codeview-keep")), this.ui.toggleBtn(e, !0);
      }
    }, {
      key: "deactivate",
      value: function deactivate(t) {
        var e = this.$toolbar.find("button");
        t || (e = e.not(".note-codeview-keep")), this.ui.toggleBtn(e, !1);
      }
    }]);
  }();
  var Yo = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/,
    Xo = /^(\+?\d{1,3}[\s-]?)?(\d{1,4})[\s-]?(\d{1,4})[\s-]?(\d{1,4})$/,
    Qo = /^([A-Za-z][A-Za-z0-9+-.]*\:|#|\/)/;
  var Jo = /*#__PURE__*/function () {
    function Jo(t) {
      _classCallCheck(this, Jo);
      this.context = t, this.ui = $.summernote.ui, this.$body = $(document.body), this.$editor = t.layoutInfo.editor, this.options = t.options, this.lang = this.options.langInfo, t.memo("help.linkDialog.show", this.options.langInfo.help["linkDialog.show"]);
    }
    return _createClass(Jo, [{
      key: "initialize",
      value: function initialize() {
        var t = this.options.dialogsInBody ? this.$body : this.options.container,
          e = ['<div class="form-group note-form-group">', "<label for=\"note-dialog-link-txt-".concat(this.options.id, "\" class=\"note-form-label\">").concat(this.lang.link.textToDisplay, "</label>"), "<input id=\"note-dialog-link-txt-".concat(this.options.id, "\" class=\"note-link-text form-control note-form-control note-input\" type=\"text\"/>"), "</div>", '<div class="form-group note-form-group">', "<label for=\"note-dialog-link-url-".concat(this.options.id, "\" class=\"note-form-label\">").concat(this.lang.link.url, "</label>"), "<input id=\"note-dialog-link-url-".concat(this.options.id, "\" class=\"note-link-url form-control note-form-control note-input\" type=\"text\" value=\"http://\"/>"), "</div>", this.options.disableLinkTarget ? "" : $("<div></div>").append(this.ui.checkbox({
            className: "sn-checkbox-open-in-new-window",
            text: this.lang.link.openInNewWindow,
            checked: !0
          }).render()).html()].join(""),
          n = "<input type=\"button\" href=\"#\" class=\"btn btn-primary note-btn note-btn-primary note-link-btn\" value=\"".concat(this.lang.link.insert, "\" disabled>");
        this.$dialog = this.ui.dialog({
          className: "link-dialog",
          title: this.lang.link.insert,
          fade: this.options.dialogsFade,
          body: e,
          footer: n
        }).render().appendTo(t);
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.ui.hideDialog(this.$dialog), this.$dialog.remove();
      }
    }, {
      key: "bindEnterKey",
      value: function bindEnterKey(t, e) {
        t.on("keypress", function (o) {
          o.keyCode === w.code.ENTER && (o.preventDefault(), e.trigger("click"));
        });
      }
    }, {
      key: "checkLinkUrl",
      value: function checkLinkUrl(t) {
        return Yo.test(t) ? "mailto://" + t : Xo.test(t) ? "tel://" + t : Qo.test(t) ? t : "http://" + t;
      }
    }, {
      key: "onCheckLinkUrl",
      value: function onCheckLinkUrl(t) {
        var _this34 = this;
        t.on("blur", function (e) {
          e.target.value = e.target.value == "" ? "" : _this34.checkLinkUrl(e.target.value);
        });
      }
    }, {
      key: "toggleLinkBtn",
      value: function toggleLinkBtn(t, e, o) {
        this.ui.toggleBtn(t, e.val() && o.val());
      }
    }, {
      key: "showLinkDialog",
      value: function showLinkDialog(t) {
        var _this35 = this;
        return $.Deferred(function (e) {
          var o = _this35.$dialog.find(".note-link-text"),
            n = _this35.$dialog.find(".note-link-url"),
            s = _this35.$dialog.find(".note-link-btn"),
            a = _this35.$dialog.find(".sn-checkbox-open-in-new-window input[type=checkbox]");
          _this35.ui.onDialogShown(_this35.$dialog, function () {
            _this35.context.triggerEvent("dialog.shown"), !t.url && v.isValidUrl(t.text) && (t.url = _this35.checkLinkUrl(t.text)), o.on("input paste propertychange", function () {
              var c = o.val(),
                h = document.createElement("div");
              h.innerText = c, c = h.innerHTML, t.text = c, _this35.toggleLinkBtn(s, o, n);
            }).val(t.text), n.on("input paste propertychange", function () {
              t.text || o.val(n.val()), _this35.toggleLinkBtn(s, o, n);
            }).val(t.url), S.isSupportTouch || n.trigger("focus"), _this35.toggleLinkBtn(s, o, n), _this35.bindEnterKey(n, s), _this35.bindEnterKey(o, s), _this35.onCheckLinkUrl(n);
            var l = t.isNewWindow !== void 0 ? t.isNewWindow : _this35.context.options.linkTargetBlank;
            a.prop("checked", l), s.one("click", function (c) {
              c.preventDefault(), e.resolve({
                range: t.range,
                url: n.val(),
                text: o.val(),
                isNewWindow: a.is(":checked")
              }), _this35.ui.hideDialog(_this35.$dialog);
            });
          }), _this35.ui.onDialogHidden(_this35.$dialog, function () {
            o.off(), n.off(), s.off(), e.state() === "pending" && e.reject();
          }), _this35.ui.showDialog(_this35.$dialog);
        }).promise();
      }
    }, {
      key: "show",
      value: function show() {
        var _this36 = this;
        var t = this.context.invoke("editor.getLinkInfo");
        this.context.invoke("editor.saveRange"), this.showLinkDialog(t).then(function (e) {
          _this36.context.invoke("editor.restoreRange"), _this36.context.invoke("editor.createLink", e);
        }).fail(function () {
          _this36.context.invoke("editor.restoreRange");
        });
      }
    }]);
  }();
  var ti = /*#__PURE__*/function () {
    function ti(t) {
      var _this37 = this;
      _classCallCheck(this, ti);
      this.context = t, this.ui = $.summernote.ui, this.options = t.options, this.events = {
        "summernote.keyup summernote.mouseup summernote.change summernote.scroll": function summernoteKeyup_summernoteMouseup_summernoteChange_summernoteScroll() {
          _this37.update();
        },
        "summernote.disable summernote.dialog.shown": function summernoteDisable_summernoteDialogShown() {
          _this37.hide();
        },
        "summernote.blur": function summernoteBlur(e, o) {
          o.originalEvent && o.originalEvent.relatedTarget ? _this37.$popover[0].contains(o.originalEvent.relatedTarget) || _this37.hide() : _this37.hide();
        }
      };
    }
    return _createClass(ti, [{
      key: "shouldInitialize",
      value: function shouldInitialize() {
        return !u.isEmpty(this.options.popover.link);
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.$popover = this.ui.popover({
          className: "note-link-popover",
          callback: function callback(e) {
            e.find(".popover-content,.note-popover-content").prepend('<span><a target="_blank"></a>&nbsp;</span>');
          }
        }).render().appendTo(this.options.container);
        var t = this.$popover.find(".popover-content,.note-popover-content");
        this.context.invoke("buttons.build", t, this.options.popover.link), this.$popover.on("mousedown", function (e) {
          e.preventDefault();
        });
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.$popover.remove();
      }
    }, {
      key: "update",
      value: function update() {
        if (!this.context.invoke("editor.hasFocus")) {
          this.hide();
          return;
        }
        var t = this.context.invoke("editor.getLastRange");
        if (t.isCollapsed() && t.isOnAnchor()) {
          var e = r.ancestor(t.sc, r.isAnchor),
            o = $(e).attr("href");
          this.$popover.find("a").attr("href", o).text(o);
          var n = r.posFromPlaceholder(e),
            s = $(this.options.container).offset();
          n.top -= s.top, n.left -= s.left, this.$popover.css({
            display: "block",
            left: n.left,
            top: n.top
          });
        } else this.hide();
      }
    }, {
      key: "hide",
      value: function hide() {
        this.$popover.hide();
      }
    }]);
  }();
  var ei = /*#__PURE__*/function () {
    function ei(t) {
      _classCallCheck(this, ei);
      this.context = t, this.ui = $.summernote.ui, this.$body = $(document.body), this.$editor = t.layoutInfo.editor, this.options = t.options, this.lang = this.options.langInfo;
    }
    return _createClass(ei, [{
      key: "initialize",
      value: function initialize() {
        var t = "";
        if (this.options.maximumImageFileSize) {
          var a = Math.floor(Math.log(this.options.maximumImageFileSize) / Math.log(1024)),
            l = (this.options.maximumImageFileSize / Math.pow(1024, a)).toFixed(2) * 1 + " " + " KMGTP"[a] + "B";
          t = "<small>".concat(this.lang.image.maximumFileSize + " : " + l, "</small>");
        }
        var e = this.options.dialogsInBody ? this.$body : this.options.container,
          o = ['<div class="form-group note-form-group note-group-select-from-files">', '<label for="note-dialog-image-file-' + this.options.id + '" class="note-form-label">' + this.lang.image.selectFromFiles + "</label>", '<input id="note-dialog-image-file-' + this.options.id + '" class="note-image-input form-control-file note-form-control note-input" ', ' type="file" name="files" accept="' + this.options.acceptImageFileTypes + '" multiple="multiple"/>', t, "</div>", '<div class="form-group note-group-image-url">', '<label for="note-dialog-image-url-' + this.options.id + '" class="note-form-label">' + this.lang.image.url + "</label>", '<input id="note-dialog-image-url-' + this.options.id + '" class="note-image-url form-control note-form-control note-input" type="text"/>', "</div>"].join(""),
          s = "<input type=\"button\" href=\"#\" class=\"btn btn-primary note-btn note-btn-primary note-image-btn\" value=\"".concat(this.lang.image.insert, "\" disabled>");
        this.$dialog = this.ui.dialog({
          title: this.lang.image.insert,
          fade: this.options.dialogsFade,
          body: o,
          footer: s
        }).render().appendTo(e);
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.ui.hideDialog(this.$dialog), this.$dialog.remove();
      }
    }, {
      key: "bindEnterKey",
      value: function bindEnterKey(t, e) {
        t.on("keypress", function (o) {
          o.keyCode === w.code.ENTER && (o.preventDefault(), e.trigger("click"));
        });
      }
    }, {
      key: "show",
      value: function show() {
        var _this38 = this;
        this.context.invoke("editor.saveRange"), this.showImageDialog().then(function (t) {
          _this38.ui.hideDialog(_this38.$dialog), _this38.context.invoke("editor.restoreRange"), typeof t == "string" ? _this38.options.callbacks.onImageLinkInsert ? _this38.context.triggerEvent("image.link.insert", t) : _this38.context.invoke("editor.insertImage", t) : _this38.context.invoke("editor.insertImagesOrCallback", t);
        }).fail(function () {
          _this38.context.invoke("editor.restoreRange");
        });
      }
    }, {
      key: "showImageDialog",
      value: function showImageDialog() {
        var _this39 = this;
        return $.Deferred(function (t) {
          var e = _this39.$dialog.find(".note-image-input"),
            o = _this39.$dialog.find(".note-image-url"),
            n = _this39.$dialog.find(".note-image-btn");
          _this39.ui.onDialogShown(_this39.$dialog, function () {
            _this39.context.triggerEvent("dialog.shown"), e.replaceWith(e.clone().on("change", function (s) {
              t.resolve(s.target.files || s.target.value);
            }).val("")), o.on("input paste propertychange", function () {
              _this39.ui.toggleBtn(n, o.val());
            }).val(""), S.isSupportTouch || o.trigger("focus"), n.on("click", function (s) {
              s.preventDefault(), t.resolve(o.val());
            }), _this39.bindEnterKey(o, n);
          }), _this39.ui.onDialogHidden(_this39.$dialog, function () {
            e.off(), o.off(), n.off(), t.state() === "pending" && t.reject();
          }), _this39.ui.showDialog(_this39.$dialog);
        });
      }
    }]);
  }();
  var oi = /*#__PURE__*/function () {
    function oi(t) {
      var _this40 = this;
      _classCallCheck(this, oi);
      this.context = t, this.ui = $.summernote.ui, this.editable = t.layoutInfo.editable[0], this.options = t.options, this.events = {
        "summernote.disable summernote.dialog.shown": function summernoteDisable_summernoteDialogShown() {
          _this40.hide();
        },
        "summernote.blur": function summernoteBlur(e, o) {
          o.originalEvent && o.originalEvent.relatedTarget ? _this40.$popover[0].contains(o.originalEvent.relatedTarget) || _this40.hide() : _this40.hide();
        }
      };
    }
    return _createClass(oi, [{
      key: "shouldInitialize",
      value: function shouldInitialize() {
        return !u.isEmpty(this.options.popover.image);
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.$popover = this.ui.popover({
          className: "note-image-popover"
        }).render().appendTo(this.options.container);
        var t = this.$popover.find(".popover-content,.note-popover-content");
        this.context.invoke("buttons.build", t, this.options.popover.image), this.$popover.on("mousedown", function (e) {
          e.preventDefault();
        });
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.$popover.remove();
      }
    }, {
      key: "update",
      value: function update(t, e) {
        if (r.isImg(t)) {
          var o = $(t).offset(),
            n = $(this.options.container).offset();
          var s = {};
          this.options.popatmouse ? (s.left = e.pageX - 20, s.top = e.pageY) : s = o, s.top -= n.top, s.left -= n.left, this.$popover.css({
            display: "block",
            left: s.left,
            top: s.top
          });
        } else this.hide();
      }
    }, {
      key: "hide",
      value: function hide() {
        this.$popover.hide();
      }
    }]);
  }();
  var ii = /*#__PURE__*/function () {
    function ii(t) {
      var _this41 = this;
      _classCallCheck(this, ii);
      this.context = t, this.ui = $.summernote.ui, this.options = t.options, this.events = {
        "summernote.mousedown": function summernoteMousedown(e, o) {
          _this41.update(o.target);
        },
        "summernote.keyup summernote.scroll summernote.change": function summernoteKeyup_summernoteScroll_summernoteChange() {
          _this41.update();
        },
        "summernote.disable summernote.dialog.shown": function summernoteDisable_summernoteDialogShown() {
          _this41.hide();
        },
        "summernote.blur": function summernoteBlur(e, o) {
          o.originalEvent && o.originalEvent.relatedTarget ? _this41.$popover[0].contains(o.originalEvent.relatedTarget) || _this41.hide() : _this41.hide();
        }
      };
    }
    return _createClass(ii, [{
      key: "shouldInitialize",
      value: function shouldInitialize() {
        return !u.isEmpty(this.options.popover.table);
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.$popover = this.ui.popover({
          className: "note-table-popover"
        }).render().appendTo(this.options.container);
        var t = this.$popover.find(".popover-content,.note-popover-content");
        this.context.invoke("buttons.build", t, this.options.popover.table), S.isFF && document.execCommand("enableInlineTableEditing", !1, !1), this.$popover.on("mousedown", function (e) {
          e.preventDefault();
        });
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.$popover.remove();
      }
    }, {
      key: "update",
      value: function update(t) {
        if (this.context.isDisabled()) return !1;
        var e = r.isCell(t) || r.isCell(t == null ? void 0 : t.parentElement);
        if (e) {
          var o = r.posFromPlaceholder(t),
            n = $(this.options.container).offset();
          o.top -= n.top, o.left -= n.left, this.$popover.css({
            display: "block",
            left: o.left,
            top: o.top
          });
        } else this.hide();
        return e;
      }
    }, {
      key: "hide",
      value: function hide() {
        this.$popover.hide();
      }
    }]);
  }();
  var ni = /*#__PURE__*/function () {
    function ni(t) {
      _classCallCheck(this, ni);
      this.context = t, this.ui = $.summernote.ui, this.$body = $(document.body), this.$editor = t.layoutInfo.editor, this.options = t.options, this.lang = this.options.langInfo;
    }
    return _createClass(ni, [{
      key: "initialize",
      value: function initialize() {
        var t = this.options.dialogsInBody ? this.$body : this.options.container,
          e = ['<div class="form-group note-form-group row-fluid">', "<label for=\"note-dialog-video-url-".concat(this.options.id, "\" class=\"note-form-label\">").concat(this.lang.video.url, " <small class=\"text-muted\">").concat(this.lang.video.providers, "</small></label>"), "<input id=\"note-dialog-video-url-".concat(this.options.id, "\" class=\"note-video-url form-control note-form-control note-input\" type=\"text\"/>"), "</div>"].join(""),
          n = "<input type=\"button\" href=\"#\" class=\"btn btn-primary note-btn note-btn-primary note-video-btn\" value=\"".concat(this.lang.video.insert, "\" disabled>");
        this.$dialog = this.ui.dialog({
          title: this.lang.video.insert,
          fade: this.options.dialogsFade,
          body: e,
          footer: n
        }).render().appendTo(t);
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.ui.hideDialog(this.$dialog), this.$dialog.remove();
      }
    }, {
      key: "bindEnterKey",
      value: function bindEnterKey(t, e) {
        t.on("keypress", function (o) {
          o.keyCode === w.code.ENTER && (o.preventDefault(), e.trigger("click"));
        });
      }
    }, {
      key: "createVideoNode",
      value: function createVideoNode(t) {
        var e = /(?:youtu\.be\/|youtube\.com\/(?:[^\/\n\s]+\/\S+\/|(?:v|e(?:mbed)?)\/|\S*?[?&]v=|shorts\/|live\/))([^&\n?]+)(?:.*[?&]t=([^&\n]+))?.*/,
          o = /^(?:(\d+)h)?(?:(\d+)m)?(?:(\d+)s)?$/,
          n = t.match(e),
          s = /(?:\.|\/\/)drive\.google\.com\/file\/d\/(.[a-zA-Z0-9_-]*)\/view/,
          a = t.match(s),
          l = /(?:www\.|\/\/)instagram\.com\/(reel|p)\/(.[a-zA-Z0-9_-]*)/,
          c = t.match(l),
          h = /\/\/vine\.co\/v\/([a-zA-Z0-9]+)/,
          d = t.match(h),
          f = /\/\/(player\.)?vimeo\.com\/([a-z]*\/)*(\d+)[?]?.*/,
          C = t.match(f),
          b = /.+dailymotion.com\/(video|hub)\/([^_]+)[^#]*(#video=([^_&]+))?/,
          T = t.match(b),
          A = /\/\/v\.youku\.com\/v_show\/id_(\w+)=*\.html/,
          O = t.match(A),
          p = /\/\/(.*)\/videos\/watch\/([^?]*)(?:\?(?:start=(\w*))?(?:&stop=(\w*))?(?:&loop=([10]))?(?:&autoplay=([10]))?(?:&muted=([10]))?)?/,
          m = t.match(p),
          x = /\/\/v\.qq\.com.*?vid=(.+)/,
          y = t.match(x),
          U = /\/\/v\.qq\.com\/x?\/?(page|cover).*?\/([^\/]+)\.html\??.*/,
          M = t.match(U),
          j = /^.+.(mp4|m4v)$/,
          z = t.match(j),
          P = /^.+.(ogg|ogv)$/,
          V = t.match(P),
          Ci = /^.+.(webm)$/,
          ki = t.match(Ci),
          wi = /(?:www\.|\/\/)facebook\.com\/([^\/]+)\/videos\/([0-9]+)/,
          St = t.match(wi);
        var L;
        if (n && n[1].length === 11) {
          var Et = n[1];
          var Q = 0;
          if (_typeof(n[2]) < "u") {
            var Rt = n[2].match(o);
            if (Rt) for (var ne = [3600, 60, 1], J = 0, xi = ne.length; J < xi; J++) Q += _typeof(Rt[J + 1]) < "u" ? ne[J] * parseInt(Rt[J + 1], 10) : 0;else Q = parseInt(n[2], 10);
          }
          L = $("<iframe>").attr("frameborder", 0).attr("src", "//www.youtube.com/embed/" + Et + (Q > 0 ? "?start=" + Q : "")).attr("width", "640").attr("height", "360");
        } else if (a && a[0].length) L = $("<iframe>").attr("frameborder", 0).attr("src", "https://drive.google.com/file/d/" + a[1] + "/preview").attr("width", "640").attr("height", "480");else if (c && c[0].length) L = $("<iframe>").attr("frameborder", 0).attr("src", "https://instagram.com/p/" + c[2] + "/embed/").attr("width", "612").attr("height", "710").attr("scrolling", "no").attr("allowtransparency", "true");else if (d && d[0].length) L = $("<iframe>").attr("frameborder", 0).attr("src", d[0] + "/embed/simple").attr("width", "600").attr("height", "600").attr("class", "vine-embed");else if (C && C[3].length) L = $("<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>").attr("frameborder", 0).attr("src", "//player.vimeo.com/video/" + C[3]).attr("width", "640").attr("height", "360");else if (T && T[2].length) L = $("<iframe>").attr("frameborder", 0).attr("src", "//www.dailymotion.com/embed/video/" + T[2]).attr("width", "640").attr("height", "360");else if (O && O[1].length) L = $("<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>").attr("frameborder", 0).attr("height", "498").attr("width", "510").attr("src", "//player.youku.com/embed/" + O[1]);else if (m && m[0].length) {
          var Tt = 0;
          m[2] !== "undefined" && (Tt = m[2]);
          var se = 0;
          m[3] !== "undefined" && (se = m[3]);
          var re = 0;
          m[4] !== "undefined" && (re = m[4]);
          var ae = 0;
          m[5] !== "undefined" && (ae = m[5]);
          var le = 0;
          m[6] !== "undefined" && (le = m[6]), L = $('<iframe allowfullscreen sandbox="allow-same-origin allow-scripts allow-popups">').attr("frameborder", 0).attr("src", "//" + m[1] + "/videos/embed/" + m[2] + "?loop=" + re + "&autoplay=" + ae + "&muted=" + le + (Tt > 0 ? "&start=" + Tt : "") + (se > 0 ? "&end=" + Q : "")).attr("width", "560").attr("height", "315");
        } else if (y && y[1].length || M && M[2].length) {
          var _Et = y && y[1].length ? y[1] : M[2];
          L = $("<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>").attr("frameborder", 0).attr("height", "310").attr("width", "500").attr("src", "https://v.qq.com/txp/iframe/player.html?vid=" + _Et + "&amp;auto=0");
        } else if (z || V || ki) L = $("<video controls>").attr("src", t).attr("width", "640").attr("height", "360");else if (St && St[0].length) L = $("<iframe>").attr("frameborder", 0).attr("src", "https://www.facebook.com/plugins/video.php?href=" + encodeURIComponent(St[0]) + "&show_text=0&width=560").attr("width", "560").attr("height", "301").attr("scrolling", "no").attr("allowtransparency", "true");else return !1;
        return L.addClass("note-video-clip"), L[0];
      }
    }, {
      key: "show",
      value: function show() {
        var _this42 = this;
        var t = this.context.invoke("editor.getSelectedText");
        this.context.invoke("editor.saveRange"), this.showVideoDialog(t).then(function (e) {
          _this42.ui.hideDialog(_this42.$dialog), _this42.context.invoke("editor.restoreRange");
          var o = _this42.createVideoNode(e);
          o && _this42.context.invoke("editor.insertNode", o);
        }).fail(function () {
          _this42.context.invoke("editor.restoreRange");
        });
      }
    }, {
      key: "showVideoDialog",
      value: function showVideoDialog() {
        var _this43 = this;
        return $.Deferred(function (t) {
          var e = _this43.$dialog.find(".note-video-url"),
            o = _this43.$dialog.find(".note-video-btn");
          _this43.ui.onDialogShown(_this43.$dialog, function () {
            _this43.context.triggerEvent("dialog.shown"), e.on("input paste propertychange", function () {
              _this43.ui.toggleBtn(o, e.val());
            }), S.isSupportTouch || e.trigger("focus"), o.on("click", function (n) {
              n.preventDefault(), t.resolve(e.val());
            }), _this43.bindEnterKey(e, o);
          }), _this43.ui.onDialogHidden(_this43.$dialog, function () {
            e.off(), o.off(), t.state() === "pending" && t.reject();
          }), _this43.ui.showDialog(_this43.$dialog);
        });
      }
    }]);
  }();
  var si = /*#__PURE__*/function () {
    function si(t) {
      _classCallCheck(this, si);
      this.context = t, this.ui = $.summernote.ui, this.$body = $(document.body), this.$editor = t.layoutInfo.editor, this.options = t.options, this.lang = this.options.langInfo;
    }
    return _createClass(si, [{
      key: "initialize",
      value: function initialize() {
        var t = this.options.dialogsInBody ? this.$body : this.options.container,
          e = ['<p class="text-center">', '<a href="http://summernote.org/" target="_blank" rel="noopener noreferrer">Summernote @@VERSION@@</a> · ', '<a href="https://github.com/summernote/summernote" target="_blank" rel="noopener noreferrer">Project</a> · ', '<a href="https://github.com/summernote/summernote/issues" target="_blank" rel="noopener noreferrer">Issues</a>', "</p>"].join("");
        this.$dialog = this.ui.dialog({
          title: this.lang.options.help,
          fade: this.options.dialogsFade,
          body: this.createShortcutList(),
          footer: e,
          callback: function callback(o) {
            o.find(".modal-body,.note-modal-body").css({
              "max-height": 300,
              overflow: "scroll"
            });
          }
        }).render().appendTo(t);
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.ui.hideDialog(this.$dialog), this.$dialog.remove();
      }
    }, {
      key: "createShortcutList",
      value: function createShortcutList() {
        var _this44 = this;
        var t = this.options.keyMap[S.isMac ? "mac" : "pc"];
        return Object.keys(t).map(function (e) {
          var o = t[e],
            n = $('<div><div class="help-list-item"></div></div>');
          return n.append($("<label><kbd>" + e + "</kdb></label>").css({
            width: 180,
            "margin-right": 10
          })).append($("<span></span>").html(_this44.context.memo("help." + o) || o)), n.html();
        }).join("");
      }
    }, {
      key: "showHelpDialog",
      value: function showHelpDialog() {
        var _this45 = this;
        return $.Deferred(function (t) {
          _this45.ui.onDialogShown(_this45.$dialog, function () {
            _this45.context.triggerEvent("dialog.shown"), t.resolve();
          }), _this45.ui.showDialog(_this45.$dialog);
        }).promise();
      }
    }, {
      key: "show",
      value: function show() {
        var _this46 = this;
        this.context.invoke("editor.saveRange"), this.showHelpDialog().then(function () {
          _this46.context.invoke("editor.restoreRange");
        });
      }
    }]);
  }();
  var ri = -5,
    ai = 5;
  var li = /*#__PURE__*/function () {
    function li(t) {
      var _this47 = this;
      _classCallCheck(this, li);
      this.context = t, this.ui = $.summernote.ui, this.options = t.options, this.hidable = !0, this.onContextmenu = !1, this.pageX = null, this.pageY = null, this.events = {
        "summernote.contextmenu": function summernoteContextmenu(e) {
          _this47.options.editing && (e.preventDefault(), e.stopPropagation(), _this47.onContextmenu = !0, _this47.update(!0));
        },
        "summernote.mousedown": function summernoteMousedown(e, o) {
          _this47.pageX = o.pageX, _this47.pageY = o.pageY;
        },
        "summernote.keyup summernote.mouseup summernote.scroll": function summernoteKeyup_summernoteMouseup_summernoteScroll(e, o) {
          if (_this47.options.editing && !_this47.onContextmenu) {
            if (o.type == "keyup") {
              var s = _this47.context.invoke("editor.getLastRange").getWordRange();
              var a = v.rect2bnd(u.last(s.getClientRects()));
              _this47.pageX = a.left, _this47.pageY = a.top;
            } else _this47.pageX = o.pageX, _this47.pageY = o.pageY;
            _this47.update();
          }
          _this47.onContextmenu = !1;
        },
        "summernote.disable summernote.change summernote.dialog.shown summernote.blur": function summernoteDisable_summernoteChange_summernoteDialogShown_summernoteBlur() {
          _this47.hide();
        },
        "summernote.focusout": function summernoteFocusout() {
          _this47.$popover.is(":active,:focus") || _this47.hide();
        }
      };
    }
    return _createClass(li, [{
      key: "shouldInitialize",
      value: function shouldInitialize() {
        return this.options.airMode && !u.isEmpty(this.options.popover.air);
      }
    }, {
      key: "initialize",
      value: function initialize() {
        var _this48 = this;
        this.$popover = this.ui.popover({
          className: "note-air-popover"
        }).render().appendTo(this.options.container);
        var t = this.$popover.find(".popover-content");
        this.context.invoke("buttons.build", t, this.options.popover.air), this.$popover.on("mousedown", function () {
          _this48.hidable = !1;
        }), this.$popover.on("mouseup", function () {
          _this48.hidable = !0;
        });
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.$popover.remove();
      }
    }, {
      key: "update",
      value: function update(t) {
        var e = this.context.invoke("editor.currentStyle");
        if (e.range && (!e.range.isCollapsed() || t)) {
          var o = {
            left: this.pageX,
            top: this.pageY
          };
          var n = $(this.options.container).offset();
          o.top -= n.top, o.left -= n.left, this.$popover.css({
            display: "block",
            left: Math.max(o.left, 0) + ri,
            top: o.top + ai
          }), this.context.invoke("buttons.updateCurrentStyle", this.$popover);
        } else this.hide();
      }
    }, {
      key: "updateCodeview",
      value: function updateCodeview(t) {
        this.ui.toggleBtnActive(this.$popover.find(".btn-codeview"), t), t && this.hide();
      }
    }, {
      key: "hide",
      value: function hide() {
        this.hidable && this.$popover.hide();
      }
    }]);
  }();
  var ee = 5;
  var ci = /*#__PURE__*/function () {
    function ci(t) {
      var _this49 = this;
      _classCallCheck(this, ci);
      this.context = t, this.ui = $.summernote.ui, this.$editable = t.layoutInfo.editable, this.options = t.options, this.hint = this.options.hint || [], this.direction = this.options.hintDirection || "bottom", this.hints = Array.isArray(this.hint) ? this.hint : [this.hint], this.events = {
        "summernote.keyup": function summernoteKeyup(e, o) {
          o.isDefaultPrevented() || _this49.handleKeyup(o);
        },
        "summernote.keydown": function summernoteKeydown(e, o) {
          _this49.handleKeydown(o);
        },
        "summernote.disable summernote.dialog.shown summernote.blur": function summernoteDisable_summernoteDialogShown_summernoteBlur() {
          _this49.hide();
        }
      };
    }
    return _createClass(ci, [{
      key: "shouldInitialize",
      value: function shouldInitialize() {
        return this.hints.length > 0;
      }
    }, {
      key: "initialize",
      value: function initialize() {
        var _this50 = this;
        this.lastWordRange = null, this.matchingWord = null, this.$popover = this.ui.popover({
          className: "note-hint-popover",
          hideArrow: !0,
          direction: ""
        }).render().appendTo(this.options.container), this.$popover.hide(), this.$content = this.$popover.find(".popover-content,.note-popover-content"), this.$content.on("click", ".note-hint-item", function (t) {
          _this50.$content.find(".active").removeClass("active"), $(t.currentTarget).addClass("active"), _this50.replace();
        }), this.$popover.on("mousedown", function (t) {
          t.preventDefault();
        });
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.$popover.remove();
      }
    }, {
      key: "selectItem",
      value: function selectItem(t) {
        this.$content.find(".active").removeClass("active"), t.addClass("active"), this.$content[0].scrollTop = t[0].offsetTop - this.$content.innerHeight() / 2;
      }
    }, {
      key: "moveDown",
      value: function moveDown() {
        var t = this.$content.find(".note-hint-item.active"),
          e = t.next();
        if (e.length) this.selectItem(e);else {
          var o = t.parent().next();
          o.length || (o = this.$content.find(".note-hint-group").first()), this.selectItem(o.find(".note-hint-item").first());
        }
      }
    }, {
      key: "moveUp",
      value: function moveUp() {
        var t = this.$content.find(".note-hint-item.active"),
          e = t.prev();
        if (e.length) this.selectItem(e);else {
          var o = t.parent().prev();
          o.length || (o = this.$content.find(".note-hint-group").last()), this.selectItem(o.find(".note-hint-item").last());
        }
      }
    }, {
      key: "replace",
      value: function replace() {
        var t = this.$content.find(".note-hint-item.active");
        if (t.length) {
          var e = this.nodeFromItem(t);
          if (this.matchingWord !== null && this.matchingWord.length === 0) this.lastWordRange.so = this.lastWordRange.eo;else if (this.matchingWord !== null && this.matchingWord.length > 0 && !this.lastWordRange.isCollapsed()) {
            var n = this.lastWordRange.eo - this.lastWordRange.so - this.matchingWord.length;
            n > 0 && (this.lastWordRange.so += n);
          }
          if (this.lastWordRange.insertNode(e), this.options.hintSelect === "next") {
            var o = document.createTextNode("");
            $(e).after(o), k.createFromNodeBefore(o).select();
          } else k.createFromNodeAfter(e).select();
          this.lastWordRange = null, this.hide(), this.context.invoke("editor.focus"), this.context.triggerEvent("change", this.$editable.html(), this.$editable);
        }
      }
    }, {
      key: "nodeFromItem",
      value: function nodeFromItem(t) {
        var e = this.hints[t.data("index")],
          o = t.data("item");
        var n = e.content ? e.content(o) : o;
        return typeof n == "string" && (n = r.createText(n)), n;
      }
    }, {
      key: "createItemTemplates",
      value: function createItemTemplates(t, e) {
        var o = this.hints[t];
        return e.map(function (n, s) {
          var a = $('<div class="note-hint-item"></div>');
          return a.append(o.template ? o.template(n) : n + ""), a.data({
            index: t,
            item: n
          }), t === 0 && s === 0 && a.addClass("active"), a;
        });
      }
    }, {
      key: "handleKeydown",
      value: function handleKeydown(t) {
        this.$popover.is(":visible") && (t.keyCode === w.code.ENTER ? (t.preventDefault(), this.replace()) : t.keyCode === w.code.UP ? (t.preventDefault(), this.moveUp()) : t.keyCode === w.code.DOWN && (t.preventDefault(), this.moveDown()));
      }
    }, {
      key: "searchKeyword",
      value: function searchKeyword(t, e, o) {
        var n = this.hints[t];
        if (n && n.match.test(e) && n.search) {
          var s = n.match.exec(e);
          this.matchingWord = s[0], n.search(s[1], o);
        } else o();
      }
    }, {
      key: "createGroup",
      value: function createGroup(t, e) {
        var _this51 = this;
        var o = $('<div class="note-hint-group note-hint-group-' + t + '"></div>');
        return this.searchKeyword(t, e, function (n) {
          n = n || [], n.length && (o.html(_this51.createItemTemplates(t, n)), _this51.show());
        }), o;
      }
    }, {
      key: "handleKeyup",
      value: function handleKeyup(t) {
        var _this52 = this;
        if (!u.contains([w.code.ENTER, w.code.UP, w.code.DOWN], t.keyCode)) {
          var e = this.context.invoke("editor.getLastRange"),
            o,
            n;
          if (this.options.hintMode === "words") {
            if (o = e.getWordsRange(e), n = o.toString(), this.hints.forEach(function (s) {
              if (s.match.test(n)) return o = e.getWordsMatchRange(s.match), !1;
            }), !o) {
              this.hide();
              return;
            }
            n = o.toString();
          } else o = e.getWordRange(), n = o.toString();
          if (this.hints.length && n) {
            this.$content.empty();
            var s = v.rect2bnd(u.last(o.getClientRects())),
              a = $(this.options.container).offset();
            s && (s.top -= a.top, s.left -= a.left, this.$popover.hide(), this.lastWordRange = o, this.hints.forEach(function (l, c) {
              l.match.test(n) && _this52.createGroup(c, n).appendTo(_this52.$content);
            }), this.$content.find(".note-hint-item").first().addClass("active"), this.direction === "top" ? this.$popover.css({
              left: s.left,
              top: s.top - this.$popover.outerHeight() - ee
            }) : this.$popover.css({
              left: s.left,
              top: s.top + s.height + ee
            }));
          } else this.hide();
        }
      }
    }, {
      key: "show",
      value: function show() {
        this.$popover.show();
      }
    }, {
      key: "hide",
      value: function hide() {
        this.$popover.hide();
      }
    }]);
  }();
  $.summernote = $.extend($.summernote, {
    version: "@@VERSION@@",
    plugins: {},
    dom: r,
    range: k,
    lists: u,
    options: {
      langInfo: $.summernote.lang["en-US"],
      editing: !0,
      modules: {
        editor: Ho,
        clipboard: Do,
        dropzone: Mo,
        codeview: zo,
        statusbar: Bo,
        fullscreen: Oo,
        handle: Uo,
        hintPopover: ci,
        autoLink: Ko,
        autoSync: Vo,
        autoReplace: qo,
        placeholder: _o,
        buttons: Go,
        toolbar: Zo,
        linkDialog: Jo,
        linkPopover: ti,
        imageDialog: ei,
        imagePopover: oi,
        tablePopover: ii,
        videoDialog: ni,
        helpDialog: si,
        airPopover: li
      },
      buttons: {},
      lang: "en-US",
      followingToolbar: !1,
      toolbarPosition: "top",
      otherStaticBar: "",
      codeviewKeepButton: !1,
      toolbar: [["style", ["style"]], ["font", ["bold", "underline", "clear"]], ["fontname", ["fontname"]], ["color", ["color"]], ["para", ["ul", "ol", "paragraph"]], ["table", ["table"]], ["insert", ["link", "picture", "video"]], ["view", ["fullscreen", "codeview", "help"]]],
      popatmouse: !0,
      popover: {
        image: [["resize", ["resizeFull", "resizeHalf", "resizeQuarter", "resizeNone"]], ["float", ["floatLeft", "floatRight", "floatNone"]], ["remove", ["removeMedia"]]],
        link: [["link", ["linkDialogShow", "unlink"]]],
        table: [["add", ["addRowDown", "addRowUp", "addColLeft", "addColRight"]], ["delete", ["deleteRow", "deleteCol", "deleteTable"]]],
        air: [["color", ["color"]], ["font", ["bold", "underline", "clear"]], ["para", ["ul", "paragraph"]], ["table", ["table"]], ["insert", ["link", "picture"]], ["view", ["fullscreen", "codeview"]]]
      },
      linkAddNoReferrer: !1,
      addLinkNoOpener: !1,
      airMode: !1,
      overrideContextMenu: !1,
      width: null,
      height: null,
      linkTargetBlank: !0,
      focus: !1,
      tabDisable: !1,
      tabSize: 4,
      styleWithCSS: !1,
      shortcuts: !0,
      textareaAutoSync: !0,
      tooltip: "auto",
      container: null,
      maxTextLength: 0,
      blockquoteBreakingLevel: 2,
      spellCheck: !0,
      disableGrammar: !1,
      placeholder: null,
      inheritPlaceholder: !1,
      recordEveryKeystroke: !1,
      historyLimit: 200,
      showDomainOnlyForAutolink: !1,
      hintMode: "word",
      hintSelect: "after",
      hintDirection: "bottom",
      styleTags: ["p", "blockquote", "pre", "h1", "h2", "h3", "h4", "h5", "h6"],
      fontNames: ["Arial", "Arial Black", "Comic Sans MS", "Courier New", "Helvetica Neue", "Helvetica", "Impact", "Lucida Grande", "Tahoma", "Times New Roman", "Verdana"],
      fontNamesIgnoreCheck: [],
      addDefaultFonts: !0,
      fontSizes: ["8", "9", "10", "11", "12", "14", "18", "24", "36"],
      fontSizeUnits: ["px", "pt"],
      colors: [["#000000", "#424242", "#636363", "#9C9C94", "#CEC6CE", "#EFEFEF", "#F7F7F7", "#FFFFFF"], ["#FF0000", "#FF9C00", "#FFFF00", "#00FF00", "#00FFFF", "#0000FF", "#9C00FF", "#FF00FF"], ["#F7C6CE", "#FFE7CE", "#FFEFC6", "#D6EFD6", "#CEDEE7", "#CEE7F7", "#D6D6E7", "#E7D6DE"], ["#E79C9C", "#FFC69C", "#FFE79C", "#B5D6A5", "#A5C6CE", "#9CC6EF", "#B5A5D6", "#D6A5BD"], ["#E76363", "#F7AD6B", "#FFD663", "#94BD7B", "#73A5AD", "#6BADDE", "#8C7BC6", "#C67BA5"], ["#CE0000", "#E79439", "#EFC631", "#6BA54A", "#4A7B8C", "#3984C6", "#634AA5", "#A54A7B"], ["#9C0000", "#B56308", "#BD9400", "#397B21", "#104A5A", "#085294", "#311873", "#731842"], ["#630000", "#7B3900", "#846300", "#295218", "#083139", "#003163", "#21104A", "#4A1031"]],
      colorsName: [["Black", "Tundora", "Dove Gray", "Star Dust", "Pale Slate", "Gallery", "Alabaster", "White"], ["Red", "Orange Peel", "Yellow", "Green", "Cyan", "Blue", "Electric Violet", "Magenta"], ["Azalea", "Karry", "Egg White", "Zanah", "Botticelli", "Tropical Blue", "Mischka", "Twilight"], ["Tonys Pink", "Peach Orange", "Cream Brulee", "Sprout", "Casper", "Perano", "Cold Purple", "Careys Pink"], ["Mandy", "Rajah", "Dandelion", "Olivine", "Gulf Stream", "Viking", "Blue Marguerite", "Puce"], ["Guardsman Red", "Fire Bush", "Golden Dream", "Chelsea Cucumber", "Smalt Blue", "Boston Blue", "Butterfly Bush", "Cadillac"], ["Sangria", "Mai Tai", "Buddha Gold", "Forest Green", "Eden", "Venice Blue", "Meteorite", "Claret"], ["Rosewood", "Cinnamon", "Olive", "Parsley", "Tiber", "Midnight Blue", "Valentino", "Loulou"]],
      colorButton: {
        foreColor: "#000000",
        backColor: "#FFFF00"
      },
      lineHeights: ["1.0", "1.2", "1.4", "1.5", "1.6", "1.8", "2.0", "3.0"],
      tableClassName: "table table-bordered",
      insertTableMaxSize: {
        col: 10,
        row: 10
      },
      dialogsInBody: !1,
      dialogsFade: !1,
      maximumImageFileSize: null,
      acceptImageFileTypes: "image/*",
      allowClipboardImagePasting: !0,
      callbacks: {
        onBeforeCommand: null,
        onBlur: null,
        onBlurCodeview: null,
        onChange: null,
        onChangeCodeview: null,
        onDialogShown: null,
        onEnter: null,
        onFocus: null,
        onImageLinkInsert: null,
        onImageUpload: null,
        onImageUploadError: null,
        onInit: null,
        onKeydown: null,
        onKeyup: null,
        onMousedown: null,
        onMouseup: null,
        onPaste: null,
        onScroll: null
      },
      codemirror: {
        mode: "text/html",
        htmlMode: !0,
        lineNumbers: !0
      },
      codeviewFilter: !0,
      codeviewFilterRegex: /<\/*(?:applet|b(?:ase|gsound|link)|embed|frame(?:set)?|ilayer|l(?:ayer|ink)|meta|object|s(?:cript|tyle)|t(?:itle|extarea)|xml)[^>]*?>/gi,
      codeviewIframeFilter: !0,
      codeviewIframeWhitelistSrc: [],
      codeviewIframeWhitelistSrcBase: ["www.youtube.com", "www.youtube-nocookie.com", "www.facebook.com", "vine.co", "instagram.com", "player.vimeo.com", "www.dailymotion.com", "player.youku.com", "jumpingbean.tv", "v.qq.com"],
      keyMap: {
        pc: {
          ESC: "escape",
          ENTER: "insertParagraph",
          "CTRL+Z": "undo",
          "CTRL+Y": "redo",
          TAB: "tab",
          "SHIFT+TAB": "untab",
          "CTRL+B": "bold",
          "CTRL+I": "italic",
          "CTRL+U": "underline",
          "CTRL+SHIFT+S": "strikethrough",
          "CTRL+BACKSLASH": "removeFormat",
          "CTRL+SHIFT+L": "justifyLeft",
          "CTRL+SHIFT+E": "justifyCenter",
          "CTRL+SHIFT+R": "justifyRight",
          "CTRL+SHIFT+J": "justifyFull",
          "CTRL+SHIFT+NUM7": "insertUnorderedList",
          "CTRL+SHIFT+NUM8": "insertOrderedList",
          "CTRL+LEFTBRACKET": "outdent",
          "CTRL+RIGHTBRACKET": "indent",
          "CTRL+NUM0": "formatPara",
          "CTRL+NUM1": "formatH1",
          "CTRL+NUM2": "formatH2",
          "CTRL+NUM3": "formatH3",
          "CTRL+NUM4": "formatH4",
          "CTRL+NUM5": "formatH5",
          "CTRL+NUM6": "formatH6",
          "CTRL+ENTER": "insertHorizontalRule",
          "CTRL+K": "linkDialog.show"
        },
        mac: {
          ESC: "escape",
          ENTER: "insertParagraph",
          "CMD+Z": "undo",
          "CMD+SHIFT+Z": "redo",
          TAB: "tab",
          "SHIFT+TAB": "untab",
          "CMD+B": "bold",
          "CMD+I": "italic",
          "CMD+U": "underline",
          "CMD+SHIFT+S": "strikethrough",
          "CMD+BACKSLASH": "removeFormat",
          "CMD+SHIFT+L": "justifyLeft",
          "CMD+SHIFT+E": "justifyCenter",
          "CMD+SHIFT+R": "justifyRight",
          "CMD+SHIFT+J": "justifyFull",
          "CMD+SHIFT+NUM7": "insertUnorderedList",
          "CMD+SHIFT+NUM8": "insertOrderedList",
          "CMD+LEFTBRACKET": "outdent",
          "CMD+RIGHTBRACKET": "indent",
          "CMD+NUM0": "formatPara",
          "CMD+NUM1": "formatH1",
          "CMD+NUM2": "formatH2",
          "CMD+NUM3": "formatH3",
          "CMD+NUM4": "formatH4",
          "CMD+NUM5": "formatH5",
          "CMD+NUM6": "formatH6",
          "CMD+ENTER": "insertHorizontalRule",
          "CMD+K": "linkDialog.show"
        }
      },
      icons: {
        align: "note-icon-align",
        alignCenter: "note-icon-align-center",
        alignJustify: "note-icon-align-justify",
        alignLeft: "note-icon-align-left",
        alignRight: "note-icon-align-right",
        rowBelow: "note-icon-row-below",
        colBefore: "note-icon-col-before",
        colAfter: "note-icon-col-after",
        rowAbove: "note-icon-row-above",
        rowRemove: "note-icon-row-remove",
        colRemove: "note-icon-col-remove",
        indent: "note-icon-align-indent",
        outdent: "note-icon-align-outdent",
        arrowsAlt: "note-icon-arrows-alt",
        bold: "note-icon-bold",
        caret: "note-icon-caret",
        circle: "note-icon-circle",
        close: "note-icon-close",
        code: "note-icon-code",
        eraser: "note-icon-eraser",
        floatLeft: "note-icon-float-left",
        floatRight: "note-icon-float-right",
        font: "note-icon-font",
        frame: "note-icon-frame",
        italic: "note-icon-italic",
        link: "note-icon-link",
        unlink: "note-icon-chain-broken",
        magic: "note-icon-magic",
        menuCheck: "note-icon-menu-check",
        minus: "note-icon-minus",
        orderedlist: "note-icon-orderedlist",
        pencil: "note-icon-pencil",
        picture: "note-icon-picture",
        question: "note-icon-question",
        redo: "note-icon-redo",
        rollback: "note-icon-rollback",
        square: "note-icon-square",
        strikethrough: "note-icon-strikethrough",
        subscript: "note-icon-subscript",
        superscript: "note-icon-superscript",
        table: "note-icon-table",
        textHeight: "note-icon-text-height",
        trash: "note-icon-trash",
        underline: "note-icon-underline",
        undo: "note-icon-undo",
        unorderedlist: "note-icon-unorderedlist",
        video: "note-icon-video"
      }
    }
  });
  var hi = /*#__PURE__*/function () {
    function hi(t, e, o, n) {
      _classCallCheck(this, hi);
      this.markup = t, this.children = e, this.options = o, this.callback = n;
    }
    return _createClass(hi, [{
      key: "render",
      value: function render(t) {
        var e = $(this.markup);
        if (this.options && this.options.contents && e.html(this.options.contents), this.options && this.options.className && e.addClass(this.options.className), this.options && this.options.data && $.each(this.options.data, function (o, n) {
          e.attr("data-" + o, n);
        }), this.options && this.options.click && e.on("click", this.options.click), this.children) {
          var o = e.find(".note-children-container");
          this.children.forEach(function (n) {
            n.render(o.length ? o : e);
          });
        }
        return this.callback && this.callback(e, this.options), this.options && this.options.callback && this.options.callback(e), t && t.append(e), e;
      }
    }]);
  }();
  var I = {
      create: function create(i, t) {
        return function () {
          var e = _typeof(arguments[1]) == "object" ? arguments[1] : arguments[0];
          var o = Array.isArray(arguments[0]) ? arguments[0] : [];
          return e && e.children && (o = e.children), new hi(i, o, e, t);
        };
      }
    },
    kt = I.create('<div class="note-editor note-frame panel panel-default"></div>'),
    wt = I.create('<div class="panel-heading note-toolbar" role="toolbar"></div>'),
    st = I.create('<div class="note-editing-area"></div>'),
    rt = I.create('<textarea class="note-codable" aria-multiline="true"></textarea>'),
    xt = I.create('<div class="note-editable" contentEditable="true" role="textbox" aria-multiline="true"></div>'),
    $t = I.create(['<output class="note-status-output" role="status" aria-live="polite"></output>', '<div class="note-statusbar" role="status">', '<div class="note-resizebar" aria-label="Resize">', '<div class="note-icon-bar"></div>', '<div class="note-icon-bar"></div>', '<div class="note-icon-bar"></div>', "</div>", "</div>"].join("")),
    oe = I.create('<div class="note-editor note-airframe"></div>'),
    ie = I.create(['<div class="note-editable" contentEditable="true" role="textbox" aria-multiline="true"></div>', '<output class="note-status-output" role="status" aria-live="polite"></output>'].join("")),
    di = I.create('<div class="note-btn-group btn-group"></div>'),
    ui = I.create('<ul class="note-dropdown-menu dropdown-menu"></ul>', function (i, t) {
      var e = Array.isArray(t.items) ? t.items.map(function (o) {
        var n = typeof o == "string" ? o : o.value || "",
          s = t.template ? t.template(o) : o,
          a = _typeof(o) == "object" ? o.option : void 0,
          l = 'data-value="' + n + '"',
          c = a !== void 0 ? ' data-option="' + a + '"' : "";
        return '<li aria-label="' + n + '"><a href="#" ' + (l + c) + ">" + s + "</a></li>";
      }).join("") : t.items;
      i.html(e).attr({
        "aria-label": t.title
      }), t && t.codeviewKeepButton && i.addClass("note-codeview-keep");
    }),
    fi = function fi(i, t) {
      return i + " " + yt(t.icons.caret, "span");
    },
    pi = I.create('<ul class="note-dropdown-menu dropdown-menu note-check"></ul>', function (i, t) {
      var e = Array.isArray(t.items) ? t.items.map(function (o) {
        var n = typeof o == "string" ? o : o.value || "",
          s = t.template ? t.template(o) : o;
        return '<li aria-label="' + o + '"><a href="#" data-value="' + n + '">' + yt(t.checkClassName) + " " + s + "</a></li>";
      }).join("") : t.items;
      i.html(e).attr({
        "aria-label": t.title
      }), t && t.codeviewKeepButton && i.addClass("note-codeview-keep");
    }),
    mi = I.create('<div class="modal note-modal" aria-hidden="false" tabindex="-1" role="dialog"></div>', function (i, t) {
      t.fade && i.addClass("fade"), i.attr({
        "aria-label": t.title
      }), i.html(['<div class="modal-dialog">', '<div class="modal-content">', t.title ? '<div class="modal-header"><button type="button" class="close" data-dismiss="modal" aria-label="Close" aria-hidden="true">&times;</button><h4 class="modal-title">' + t.title + "</h4></div>" : "", '<div class="modal-body">' + t.body + "</div>", t.footer ? '<div class="modal-footer">' + t.footer + "</div>" : "", "</div>", "</div>"].join(""));
    }),
    gi = I.create(['<div class="note-popover popover in">', '<div class="arrow"></div>', '<div class="popover-content note-children-container"></div>', "</div>"].join(""), function (i, t) {
      var e = _typeof(t.direction) < "u" ? t.direction : "bottom";
      i.addClass(e), t.hideArrow && i.find(".arrow").hide();
    }),
    bi = I.create('<div class="checkbox"></div>', function (i, t) {
      i.html(["<label" + (t.id ? ' for="note-' + t.id + '"' : "") + ">", '<input type="checkbox"' + (t.id ? ' id="note-' + t.id + '"' : ""), t.checked ? " checked" : "", ' aria-checked="' + (t.checked ? "true" : "false") + '"/>', t.text ? t.text : "", "</label>"].join(""));
    }),
    yt = function yt(i, t) {
      return i.match(/^</) ? i : (t = t || "i", "<" + t + ' class="' + i + '"></' + t + ">");
    },
    vi = function vi(i) {
      return {
        editor: kt,
        toolbar: wt,
        editingArea: st,
        codable: rt,
        editable: xt,
        statusbar: $t,
        airEditor: oe,
        airEditable: ie,
        buttonGroup: di,
        dropdown: ui,
        dropdownButtonContents: fi,
        dropdownCheck: pi,
        dialog: mi,
        popover: gi,
        checkbox: bi,
        icon: yt,
        options: i,
        palette: function palette(t, e) {
          return I.create('<div class="note-color-palette"></div>', function (o, n) {
            var s = [];
            for (var l = 0, c = n.colors.length; l < c; l++) {
              var h = n.eventName,
                d = n.colors[l],
                f = n.colorsName[l],
                C = [];
              for (var b = 0, T = d.length; b < T; b++) {
                var A = d[b],
                  O = f[b];
                C.push(['<button type="button" class="note-color-btn"', 'style="background-color:', A, '" ', 'data-event="', h, '" ', 'data-value="', A, '" ', 'title="', O, '" ', 'aria-label="', O, '" ', 'data-toggle="button" tabindex="-1"></button>'].join(""));
              }
              s.push('<div class="note-color-row">' + C.join("") + "</div>");
            }
            if (o.html(s.join("")), n.tooltip) {
              var a = {
                container: n.container || i.container,
                trigger: "hover",
                placement: "bottom"
              };
              o.tooltip(_objectSpread({
                selector: ".note-color-btn"
              }, a));
            }
          })(t, e);
        },
        button: function button(t, e) {
          return I.create('<button type="button" class="note-btn btn btn-default btn-sm" tabindex="-1"></button>', function (o, n) {
            n && n.tooltip && o.attr({
              title: n.tooltip,
              "aria-label": n.tooltip
            }).tooltip({
              container: n.container || i.container,
              trigger: "hover",
              placement: "bottom"
            }).on("click", function (s) {
              $(s.currentTarget).tooltip("hide");
            }), n && n.codeviewButton && o.addClass("note-codeview-keep");
          })(t, e);
        },
        toggleBtn: function toggleBtn(t, e) {
          t.toggleClass("disabled", !e), t.attr("disabled", !e);
        },
        toggleBtnActive: function toggleBtnActive(t, e) {
          t.toggleClass("active", e);
        },
        onDialogShown: function onDialogShown(t, e) {
          t.one("shown.bs.modal", e);
        },
        onDialogHidden: function onDialogHidden(t, e) {
          t.one("hidden.bs.modal", e);
        },
        showDialog: function showDialog(t) {
          t.modal("show");
        },
        hideDialog: function hideDialog(t) {
          t.modal("hide");
        },
        createLayout: function createLayout(t) {
          var e = (i.airMode ? oe([st([rt(), ie()])]) : i.toolbarPosition === "bottom" ? kt([st([rt(), xt()]), wt(), $t()]) : kt([wt(), st([rt(), xt()]), $t()])).render();
          return e.insertAfter(t), {
            note: t,
            editor: e,
            toolbar: e.find(".note-toolbar"),
            editingArea: e.find(".note-editing-area"),
            editable: e.find(".note-editable"),
            codable: e.find(".note-codable"),
            statusbar: e.find(".note-statusbar")
          };
        },
        removeLayout: function removeLayout(t, e) {
          t.html(e.editable.html()), e.editor.remove(), t.show();
        }
      };
    };
  $.summernote = $.extend($.summernote, {
    ui_template: vi,
    interface: "bs3"
  });
})();